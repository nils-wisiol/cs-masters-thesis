#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{tikz}
\usepackage{pgfplots}
\usetikzlibrary{arrows,automata,shapes,chains,positioning}

\usepackage{amsfonts}

% redefine ensuremath to put a space behind it
% this fixes broken LyX behavior that removes spaces behind it sometimes
\usepackage{xspace} % conditional spaceing
\let\Oldensuremath\ensuremath
\renewcommand{\ensuremath}[1]{\Oldensuremath{#1}\xspace}
\end_preamble
\options 11pt
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
algolyx
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing double
\use_hyperref true
\pdf_title "Disjoint NP-Pairs and Propositional Proof Systems"
\pdf_author "Nils wisiol"
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Definition of operators
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\Sym}{\operatorname{Sym}}
{\mathrm{Sym\text{ }}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\Aut}{\operatorname{Aut}}
{\mathrm{Aut\text{ }}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\Ker}{\operatorname{Ker}}
{\mathrm{Ker}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\Img}{\operatorname{Im}}
{\mathrm{Im}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\Sep}{\operatorname{Sep}}
{\mathrm{Sep}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\powerset}{\operatorname{\mathcal{P}}}
{\mathrm{\mathcal{P}}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Definition of function classes
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\functionclass}[1]{\mathcal{#1}}
{\mathcal{#1}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\FP}{\functionclass{FP}}
{\functionclass{FP}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Definition of complexity classes
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\complexityclass}[1]{\mathrm{#1}}
{\mathrm{#1}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\DTIME}{\complexityclass{DTIME}}
{\complexityclass{DTIME}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\NTIME}{\complexityclass{NTIME}}
{\complexityclass{NTIME}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\coNTIME}{\complexityclass{coNTIME}}
{\complexityclass{coNTIME}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\P}{\complexityclass P}
{\complexityclass P}
\end_inset


\begin_inset FormulaMacro
\newcommand{\NP}{\complexityclass{NP}}
{\complexityclass{NP}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\coNP}{\complexityclass{coNP}}
{\complexityclass{coNP}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\UP}{\complexityclass{UP}}
{\complexityclass{UP}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\E}{\complexityclass E}
{\complexityclass E}
\end_inset


\begin_inset FormulaMacro
\newcommand{\NE}{\complexityclass{NE}}
{\complexityclass{NE}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\coNE}{\complexityclass{coNE}}
{\complexityclass{coNE}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\EE}{\complexityclass{EE}}
{\complexityclass{EE}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\NEE}{\complexityclass{NEE}}
{\complexityclass{NEE}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\coNEE}{\complexityclass{coNEE}}
{\complexityclass{coNEE}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\EEE}{\complexityclass{EEE}}
{\complexityclass{EEE}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\NEEE}{\complexityclass{NEEE}}
{\complexityclass{NEEE}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\coNEEE}{\complexityclass{coNEEE}}
{\complexityclass{coNEEE}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\EXP}{\complexityclass{EXP}}
{\complexityclass{EXP}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\NEXP}{\complexityclass{NEXP}}
{\complexityclass{NEXP}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\coNEXP}{\complexityclass{coNEXP}}
{\complexityclass{coNEXP}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\DisjNP}{\complexityclass{DisjNP}}
{\complexityclass{DisjNP}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\SPARSE}{\complexityclass{SPARSE}}
{\complexityclass{SPARSE}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\degree}{\operatorname{d}}
{\mathrm{d}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\GI}{\complexityclass{GI}}
{\complexityclass{GI}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\GNI}{\complexityclass{GNI}}
{\complexityclass{GNI}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\AM}{\complexityclass{AM}}
{\complexityclass{AM}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\coAM}{\complexityclass{coAM}}
{\complexityclass{coAM}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\Few}{\complexityclass{Few}}
{\complexityclass{Few}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\FewP}{\complexityclass{FewP}}
{\complexityclass{FewP}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Definition of reductions (languages)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\redmo}{\leq_{m}^{p}}
{\leq_{m}^{p}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\equivmo}{\equiv_{m}^{p}}
{\equiv_{m}^{p}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\redt}{\leq_{T}^{p}}
{\leq_{T}^{p}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\equivt}{\equiv_{T}^{p}}
{\equiv_{T}^{p}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\redr}{\leq_{r}}
{\leq_{r}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\nredr}{\nleq_{r}}
{\nleq_{r}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Definition of reductions (pairs)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\predmo}{\leq_{m}^{pp}}
{\leq_{m}^{pp}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\pequivmo}{\equiv_{m}^{pp}}
{\equiv_{m}^{pp}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\predsmo}{\leq_{sm}^{pp}}
{\leq_{sm}^{pp}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\pequivsmo}{\equiv_{sm}^{pp}}
{\equiv_{sm}^{pp}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\predt}{\leq_{T}^{pp}}
{\leq_{T}^{pp}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\pequivt}{\equiv_{T}^{pp}}
{\equiv_{T}^{pp}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\predunimo}{\leq_{um}^{pp}}
{\leq_{um}^{pp}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\pequivunimo}{\equiv_{um}^{pp}}
{\equiv_{um}^{pp}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\predunit}{\leq_{uT}^{pp}}
{\leq_{uT}^{pp}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\pequivunit}{\equiv_{uT}^{pp}}
{\equiv_{uT}^{pp}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\predr}{\leq_{r}^{pp}}
{\leq_{r}^{pp}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\pequivr}{\equiv_{r}^{pp}}
{\equiv_{r}^{pp}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Definition of simulations
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\simp}{\leq_{p}}
{\leq_{p}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Definition of languages
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\lang}[1]{\mathrm{#1}}
{\mathrm{#1}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\SAT}{\lang{SAT}}
{\lang{SAT}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\SATstar}{\lang{SAT}^{*}}
{\lang{SAT}^{*}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\REF}{\lang{REF}}
{\lang{REF}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\TAUT}{\lang{TAUT}}
{\lang{TAUT}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\TALLY}{\lang{TALLY}}
{\lang{TALLY}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
misc
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\true}{\text{true}}
{\text{true}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\false}{\text{false}}
{\text{false}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Additional statements for algorithms 
\begin_inset Newline newline
\end_inset

(Note: changes to lyxalgo.sty are needed every time a new statement is added.)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newcommand{
\backslash
keyreturn}{return}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace*{.5in}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center

\series bold
\size largest
Disjoint 
\begin_inset Formula $\NP$
\end_inset

-Pairs and Propositional Proof Systems 
\end_layout

\begin_layout Standard
\noindent
\align center
by
\end_layout

\begin_layout Standard
\noindent
\align center

\size largest
Nils Wisiol
\end_layout

\begin_layout Standard
\noindent
\align center
September, 1st 2014
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vfill
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
A thesis submitted to the Faculty of the Graduate School of the University
 at Buffalo, State University of New York in partial fulfillment of the
 requirements for the degree of
\end_layout

\begin_layout Standard
\noindent
\align center

\size largest
Master of Science
\end_layout

\begin_layout Standard
\noindent
\align center
Department of Computer Science and Engineering
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
renewcommand{
\backslash
thepage}{
\backslash
roman{page}}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace*{1in}
\backslash
vfill
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
Copyright by
\begin_inset Newline newline
\end_inset

Nils Wisiol
\begin_inset Newline newline
\end_inset

2014
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace*{2in}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing single
\noindent
\align center

\emph on
I wish to thank my advisors Alan Selman (University at Buffalo) and Christian
 Glaßer (Universität Würzburg, Germany), committee member Ken Regan and
 my friends and fellow students Andrew Hughes and Michael Wehar for their
 great support, patience, knowledge and comments.
\end_layout

\begin_layout Standard
\paragraph_spacing single
\noindent
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
This thesis on propositional proof systems and disjoint 
\begin_inset Formula $\NP$
\end_inset

-pairs gives a survey of these fields.
 We present history and motivation of both theories by giving examples for
 their use.
 The reader is then introduced into the formal notions of the fields.
 Dedicated chapters present important and outstanding results from the theories.
 Some results are proven, some results are given without a proof.
 It follows a chapter that presents the relation of both fields with a result
 due to Razborov.
 As for none of the assertions in this thesis the absolute truth value is
 known, we also survey some oracles relative to which we know the truth
 value of important statements.
 We finally look into open questions and suggest future work on both fields.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
setcounter{page}{1}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
renewcommand{
\backslash
thepage}{
\backslash
arabic{page}}
\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset Marginal
status open

\begin_layout Plain Layout

\end_layout

\end_inset

Introduction
\begin_inset CommandInset label
LatexCommand label
name "sec:Introduction"

\end_inset


\end_layout

\begin_layout Standard
This thesis aims at readers that do not have a strong background in the
 theories of propositional proof systems and disjoint 
\begin_inset Formula $\NP$
\end_inset

 pairs.
 It surveys important results from both and points out important connections
 in between these two theories.
 The core of the thesis is the implication chart in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:implication-chart"

\end_inset

 that summarizes virtually all results mentioned in this thesis.
\end_layout

\begin_layout Standard
Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Preliminaries"

\end_inset

 is split into two pieces.
 In 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Disjoint--Pairs"

\end_inset

, we introduce the reader to the theory of disjoint 
\begin_inset Formula $\NP$
\end_inset

-pairs based on the notion of promise problems.
 In 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Propositional-Proof-Systems"

\end_inset

, we familiarize ourselves with propositional proof systems.
 Both introductions contain history, motivation and notions of the theories.
 In Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Propositional-Proof-Systems"

\end_inset

, we give basic results and proofs that help the reader understanding the
 introduced notions.
 Readers familiar with notions from both fields can safely skip this Section.
\end_layout

\begin_layout Standard
Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Disjoint--Pairs"

\end_inset

 covers important results from the field of disjoint 
\begin_inset Formula $\NP$
\end_inset

-pairs.
 We will study the earlier introduced reducibility of pairs in greater detail.
 It turns out that various definitions of reducibility available in the
 literature are equivalent.
 Subsequently, we study refinements of the ESY-conjecture and connections
 to open questions of complexity class separation.
\end_layout

\begin_layout Standard
Greater details of the theory of propositional proof systems will be covered
 in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Propositional-Proof-Systems"

\end_inset

.
 We will justify the motivation to study proof systems by establishing an
 equivalent formulation of 
\begin_inset Formula $\NP=\coNP$
\end_inset

, before we look into sufficient and necessary conditions for their existence.
 These conditions will lay the foundation for the study of different oracles
 in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Relativized-Worlds"

\end_inset

.
\end_layout

\begin_layout Standard
Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Canonical-Disjoint--pairs"

\end_inset

 finally covers the connection between both theories that was discovered
 by Razborov.
 It presents a proof for Razborov's theorem that uses notions of complexity
 theory.
\end_layout

\begin_layout Standard
We also take a look at relativized worlds in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Relativized-Worlds"

\end_inset

.
 We point the reader to oracles relative to which optimal proof systems
 exist, and respectively, do not exist.
 Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Converse-of-Razborov"

\end_inset

 studies the converse of Razborov's theorem, for which we know oracles relative
 to which it holds, and relative to which it does not hold.
 Finally we refer the reader to an oracle that separates different refinements
 of the ESY-conjecture from each other.
\end_layout

\begin_layout Standard
We conclude the thesis with a summary of open questions and future work
 on the field in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Conclusion"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways true
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[->,>=stealth',shorten >=1pt,node distance=3.0cm,     
  semithick, /tikz/initial text=]   
\end_layout

\begin_layout Plain Layout


\backslash
tikzstyle{every state}=[fill=none,draw=black,text=black]
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout


\backslash
path
\end_layout

\begin_layout Plain Layout

(4,-2.5)   node(PeqNP)    {$
\backslash
P=
\backslash
NP$}
\end_layout

\begin_layout Plain Layout

(0,-5)  node(NPeqcoNP) [align=center]
\end_layout

\begin_layout Plain Layout

                 {ESY-m fails
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

                  $
\backslash
iff$
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

                  $
\backslash
NP=
\backslash
coNP$
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

                  $
\backslash
iff$
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

                  $
\backslash
exists$ poly bound proof system}
\end_layout

\begin_layout Plain Layout

(0,-13)  node(mComPair) {$
\backslash
exists$ m-complete pair}
\end_layout

\begin_layout Plain Layout

(8,-4)   node(EeqNE) {$
\backslash
E=
\backslash
NE$}
\end_layout

\begin_layout Plain Layout

(3,-8)   node(NEeqcoNE) {$
\backslash
NE=
\backslash
coNE$}
\end_layout

\begin_layout Plain Layout

(8,-7)   node(EEeqNEE) {$
\backslash
EE=
\backslash
NEE$}
\end_layout

\begin_layout Plain Layout

(6.5,-8.5)   node(NEEeqcoNEE) {$
\backslash
NEE=
\backslash
coNEE$}
\end_layout

\begin_layout Plain Layout

(6,-11)  node(optimalPS) {$
\backslash
exists$ optimal ps}
\end_layout

\begin_layout Plain Layout

(11,-8)  node(poptimalPS) {$
\backslash
exists$ p-optimal ps}
\end_layout

\begin_layout Plain Layout

(6,-14)  node(NPcapSPARSEcom) [align=center]
\end_layout

\begin_layout Plain Layout

                  {$
\backslash
exists$ log-space complete
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

                   set in $
\backslash
NP
\backslash
cap
\backslash
SPARSE$}
\end_layout

\begin_layout Plain Layout

(11,-12) node(UPcom) [align=center]
\end_layout

\begin_layout Plain Layout

                  {$
\backslash
exists$ m-complete set in
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

                   $
\backslash
UP$, $
\backslash
Few$, $
\backslash
FewP$}
\end_layout

\begin_layout Plain Layout

(-4,-7) node(ESYttfails) {ESY-tt fails}
\end_layout

\begin_layout Plain Layout

(-7,-8.5) node(ESYTfails) {ESY-T fails}
\end_layout

\begin_layout Plain Layout

(-7,-5) node(NPeqUP) {$
\backslash
NP=
\backslash
UP$}
\end_layout

\begin_layout Plain Layout

(-4,-14.5) node(ttComPair) {$
\backslash
exists$ tt-complete pair} 
\end_layout

\begin_layout Plain Layout

(-7,-16) node(TComPair) {$
\backslash
exists$ T-complete pair}
\end_layout

\begin_layout Plain Layout

(-9,-6.5) node(PKCS) [align=center] 
\end_layout

\begin_layout Plain Layout

                  {$
\backslash
exists$ PKCS with 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

                   hard cracking problem}
\end_layout

\begin_layout Plain Layout

;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
path[every node/.style={sloped,anchor=south,auto=false}]
\end_layout

\begin_layout Plain Layout

  (PeqNP) edge (NPeqcoNP)
\end_layout

\begin_layout Plain Layout

  (PeqNP) edge (EeqNE)
\end_layout

\begin_layout Plain Layout

  (NPeqcoNP) edge node{
\backslash
footnotesize
\backslash
cite{journals/eccc/ECCC-TR03-011}} (mComPair)
\end_layout

\begin_layout Plain Layout

  (NPeqcoNP) edge (NEeqcoNE)
\end_layout

\begin_layout Plain Layout

  (NPeqcoNP) edge (ESYttfails)
\end_layout

\begin_layout Plain Layout

  (EeqNE) edge (NEeqcoNE)
\end_layout

\begin_layout Plain Layout

  (EeqNE) edge (EEeqNEE)
\end_layout

\begin_layout Plain Layout

  (NEeqcoNE) edge (NEEeqcoNEE)
\end_layout

\begin_layout Plain Layout

  (EEeqNEE) edge (NEEeqcoNEE)
\end_layout

\begin_layout Plain Layout

  (NEeqcoNE) edge node{
\backslash
footnotesize
\backslash
cite{journals/jsyml/KrajicekP89, journals/logiccoll/Pudlak86}} (optimalPS)
\end_layout

\begin_layout Plain Layout

  (NEEeqcoNEE) edge node{
\backslash
footnotesize
\backslash
cite{journals/eccc/ECCC-TR97-026}} (optimalPS)
\end_layout

\begin_layout Plain Layout

  (EeqNE) edge node {
\backslash
footnotesize
\backslash
cite{journals/jsyml/KrajicekP89}} (poptimalPS)
\end_layout

\begin_layout Plain Layout

  (EEeqNEE) edge node{
\backslash
footnotesize
\backslash
cite{journals/eccc/ECCC-TR97-026}} (poptimalPS)
\end_layout

\begin_layout Plain Layout

  (poptimalPS) edge (optimalPS)
\end_layout

\begin_layout Plain Layout

  (poptimalPS) edge node{
\backslash
footnotesize
\backslash
cite{journals/eccc/ECCC-TR97-026}} (UPcom)
\end_layout

\begin_layout Plain Layout

  (optimalPS) edge node{
\backslash
footnotesize
\backslash
cite{journals/eccc/ECCC-TR94-006}} (mComPair)
\end_layout

\begin_layout Plain Layout

  (optimalPS) edge node{
\backslash
footnotesize
\backslash
cite{journals/eccc/ECCC-TR97-026}} (NPcapSPARSEcom)
\end_layout

\begin_layout Plain Layout

  (mComPair) edge (ttComPair)
\end_layout

\begin_layout Plain Layout

  (ttComPair) edge (TComPair)
\end_layout

\begin_layout Plain Layout

  (ESYttfails) edge (ESYTfails)
\end_layout

\begin_layout Plain Layout

  (NPeqUP) edge node{
\backslash
footnotesize
\backslash
cite{conf/icalp/HughesPRS12}} (ESYttfails)
\end_layout

\begin_layout Plain Layout

  (ESYttfails) edge (ttComPair)
\end_layout

\begin_layout Plain Layout

  (ESYTfails) edge (TComPair)
\end_layout

\begin_layout Plain Layout

  (PKCS) edge node{
\backslash
footnotesize
\backslash
cite{journals/siamcomp/GrollmannS88}} (ESYTfails)
\end_layout

\begin_layout Plain Layout

;
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Known Implications for proof systems, disjoint pairs and the ESY conjecture
 
\begin_inset CommandInset label
LatexCommand label
name "fig:implication-chart"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Preliminaries
\begin_inset CommandInset label
LatexCommand label
name "sec:Preliminaries"

\end_inset


\end_layout

\begin_layout Subsection
Disjoint 
\begin_inset Formula $\NP$
\end_inset

-Pairs
\begin_inset CommandInset label
LatexCommand label
name "sub:Disjoint--Pairs"

\end_inset


\end_layout

\begin_layout Standard
The study of disjoint 
\begin_inset Formula $\NP$
\end_inset

-pairs originates in the study of public-key cryptosystems (PKCS).
 The interest in secure PKCS is fundamental to everyday life as well as
 to academia, as provably hard-to-crack PKCS would imply 
\begin_inset Formula $\NP\neq\P$
\end_inset

.
\end_layout

\begin_layout Standard
To study the hardness of PKCS, Even, Selman and Yacobi 
\begin_inset CommandInset citation
LatexCommand cite
key "journals/iandc/EvenSY84"

\end_inset

 used the notion of 
\emph on
promise problems
\emph default
 rather than decision problems to model the problem of cracking a PKCS.
 In fact, promise problems are a generalization of decision problems.
 A machine working on a promise problem is not only given an input, but
 also a promise that for this input, a certain condition holds.
 The machine 
\emph on
solves
\emph default
 the problem, if it gives the right answer on all inputs for which the promise
 holds.
 If the promised condition does in fact not hold for a given input, then
 the machine can act arbitrarily.
\end_layout

\begin_layout Standard
We can define promise problems more formally, following Goldreich's survey
 
\begin_inset CommandInset citation
LatexCommand cite
key "DBLP:journals/eccc/ECCC-TR05-018"

\end_inset

: A promise problem is a partition of the set of all strings into three
 subsets:
\end_layout

\begin_layout Enumerate
The set of strings representing Yes-Instances,
\end_layout

\begin_layout Enumerate
the set of strings representing No-Instances, and
\end_layout

\begin_layout Enumerate
the set of disallowed strings.
\end_layout

\begin_layout Standard
A machine that 
\emph on
solves
\emph default
 such a promise problem has to accept on all Yes-Instances, to reject on
 all No-Instances and act arbitrarily on all other strings.
 This includes that the machine might not halt at all.
\end_layout

\begin_layout Standard
We can write this partition as a pair of two disjoint sets 
\begin_inset Formula $(A,B)$
\end_inset

, where 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

 represent Yes- and No-Instances, and the set of disallowed strings is 
\begin_inset Formula $\overline{A\cup B}$
\end_inset

.
 The 
\emph on
promise
\emph default
 in this setting is that a given input string either belongs to 
\begin_inset Formula $A$
\end_inset

 or 
\begin_inset Formula $B$
\end_inset

.
 If 
\begin_inset Formula $\overline{A\cup B}=\emptyset$
\end_inset

, then the promise problem has no disallowed strings and thus no promise,
 it is in fact a decision problem.
\begin_inset Foot
status open

\begin_layout Plain Layout
Even, Selman and Yacobi 
\begin_inset CommandInset citation
LatexCommand cite
key "journals/iandc/EvenSY84"

\end_inset

 used a pair 
\begin_inset Formula $(Q,R)$
\end_inset

 to represent promise problems, where 
\begin_inset Formula $Q$
\end_inset

 is a predicate true for all 
\emph on
allowed 
\emph default
strings (the 
\emph on
promise
\emph default
) and 
\begin_inset Formula $R$
\end_inset

 is a predicate true for all Yes-Instances (the 
\emph on
property
\emph default
).
 This relates with Goldreich's definition as follows: 
\begin_inset Formula 
\begin{eqnarray*}
A\cup B & = & \{w\in\Sigma^{*}\mid Q(w)\}\\
A & = & \{w\in\Sigma^{*}\mid Q(w)\wedge R(w)\}\\
B & = & \{w\in\Sigma^{*}\mid Q(w)\wedge\neg R(w)\}
\end{eqnarray*}

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Using this notation, we can define a promise problem that captures the hardness
 of cracking PKCS, that is, captures the hardness of finding the plain text
 to a given cipher text 
\begin_inset Formula $C$
\end_inset

 and public key 
\begin_inset Formula $K$
\end_inset

.
 To crack the cryptosystem, we will conduct a binary search among all strings
 up to a reasonable length.
 The scope for the binary search is limited, as the length of the plain
 text is polynomial in the length of the cipher text.
 Notice that this notion captures the hardness to crack 
\emph on
every
\emph default
 cipher text in a cryptosystem.
 While we can conclude cryptographic insecurity from an easy cracking problem,
 a hard cracking problem does not imply cryptographic security, as a subset
 of cipher texts may be still easy to crack.
 
\end_layout

\begin_layout Standard
The promise problem is defined as follows:
\end_layout

\begin_layout Enumerate
The set of Yes-Instances will be the set of strings 
\begin_inset Formula $\langle M',C,K\rangle$
\end_inset

 for which there exists a message 
\begin_inset Formula $M$
\end_inset

, 
\begin_inset Formula $M\leq M'$
\end_inset

, such that 
\begin_inset Formula $M$
\end_inset

 encrypted with 
\begin_inset Formula $K$
\end_inset

 yields cipher text 
\begin_inset Formula $C$
\end_inset

.
\end_layout

\begin_layout Enumerate
The set of No-Instances will be the set of strings 
\begin_inset Formula $\langle M',C,K\rangle$
\end_inset

 for which there exists a message 
\begin_inset Formula $M$
\end_inset

, 
\begin_inset Formula $M>M'$
\end_inset

, such that 
\begin_inset Formula $M$
\end_inset

 encrypted with 
\begin_inset Formula $K$
\end_inset

 yields cipher text 
\begin_inset Formula $C$
\end_inset

.
\end_layout

\begin_layout Enumerate
The set of disallowed strings will be all triples 
\begin_inset Formula $\langle M',C,K\rangle$
\end_inset

 such that for all plain texts 
\begin_inset Formula $M$
\end_inset

, encryption with 
\begin_inset Formula $K$
\end_inset

 does not yield 
\begin_inset Formula $C$
\end_inset

.
\end_layout

\begin_layout Standard
With a machine solving this promise problem, we can find the plain text
 to any given 
\begin_inset Formula $C$
\end_inset

 and 
\begin_inset Formula $K$
\end_inset

 by binary search over all messages 
\begin_inset Formula $M'$
\end_inset

.
 Thus, the runtime of cracking the public-key cryptosystem is within a logarithm
ic factor of the runtime of the machine solving the promise problem.
 Therefore, we consider the hardness of the promise problem as a good measuremen
t for the hardness of the cracking problem.
\end_layout

\begin_layout Standard
But why not model the cracking problem as a decision problem? To see why
 a simple decision problem does not capture the cracking problem correctly,
 assume we have a cryptosystem such that the 
\emph on
decision 
\emph default
problem 
\begin_inset Formula $A$
\end_inset

 is not efficiently computable.
 However, if there is an algorithm efficiently solving the promise problem
 
\begin_inset Formula $(A,B)$
\end_inset

, the crypto system would still be easy to crack.
 On the other hand, if the promise problem is hard, the decision problem
 will also be.
\end_layout

\begin_layout Standard
We call a set 
\begin_inset Formula $S$
\end_inset

 for which 
\begin_inset Formula $A\subseteq S$
\end_inset

 and 
\begin_inset Formula $B\subseteq\overline{S}$
\end_inset

 
\emph on
a separator.

\emph default
 Let the set 
\begin_inset Formula $\Sep(A,B)$
\end_inset

 denote the set of all separators for a given pair 
\begin_inset Formula $(A,B)$
\end_inset

.
 A pair 
\begin_inset Formula $(A,B)$
\end_inset

 that has no polynomial-time decidable set in 
\begin_inset Formula $\Sep(A,B)$
\end_inset

 is called 
\emph on

\begin_inset Formula $\P$
\end_inset

-inseparable
\emph default
, otherwise it is called 
\emph on

\begin_inset Formula $\P$
\end_inset

-separable
\emph default
.
\end_layout

\begin_layout Standard
The interesting class of promise problems 
\begin_inset Formula $(A,B)$
\end_inset

 is the class with promises that are not polynomial-time decidable.
 In the contrary case where 
\begin_inset Formula $A\cup B$
\end_inset

 is efficiently computable, deciding the promise problem 
\begin_inset Formula $(A,B)$
\end_inset

 is polynomial-time equivalent to solving the decision problems 
\begin_inset Formula $A$
\end_inset

 or 
\begin_inset Formula $B$
\end_inset

.
\end_layout

\begin_layout Standard
Assigning a hardness to PKCS immediately calls for a notion that compares
 the hardness of two promise problems.
 Following Grollmann and Selman 
\begin_inset CommandInset citation
LatexCommand cite
key "journals/siamcomp/GrollmannS88"

\end_inset

, we use the following reductions for promise problems that naturally arise
 from the reductions of languages.
\end_layout

\begin_layout Definition
\begin_inset ERT
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "def:pair-reduction"

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
A promise problem 
\begin_inset Formula $(A,B)$
\end_inset

 is 
\emph on
many-one-reducible in polynomial time
\emph default
 to 
\begin_inset Formula $(C,D)$
\end_inset

, 
\begin_inset Formula $(A,B)\predmo(C,D)$
\end_inset

, if for every separator 
\begin_inset Formula $T\in\Sep(C,D)$
\end_inset

, there exists a separator 
\begin_inset Formula $S\in\Sep(A,B)$
\end_inset

 such that 
\begin_inset Formula $S\redmo T$
\end_inset

.
\end_layout

\begin_layout Enumerate
A promise problem 
\begin_inset Formula $(A,B)$
\end_inset

 is 
\emph on
many-one-reducible in polynomial time
\emph default
 to 
\begin_inset Formula $(C,D)$
\end_inset

, 
\begin_inset Formula $(A,B)\predt(C,D)$
\end_inset

, if for every separator 
\begin_inset Formula $T\in\Sep(C,D)$
\end_inset

, there exists a separator 
\begin_inset Formula $S\in\Sep(A,B)$
\end_inset

 such that 
\begin_inset Formula $S\redt T$
\end_inset

.
\end_layout

\begin_layout Enumerate
As a generalization of the previous two, we define a promise problem 
\begin_inset Formula $(A,B)$
\end_inset

 to be 
\begin_inset Formula $r$
\end_inset

-
\emph on
reducible
\emph default
 to 
\begin_inset Formula $(C,D)$
\end_inset

, 
\begin_inset Formula $(A,B)\predr(C,D)$
\end_inset

, if for every separator 
\begin_inset Formula $T\in\Sep(C,D)$
\end_inset

, there exists a separator 
\begin_inset Formula $S\in\Sep(A,B)$
\end_inset

 such that 
\begin_inset Formula $S\redr T$
\end_inset

.
\end_layout

\begin_layout Enumerate
A promise problem 
\begin_inset Formula $(A,B)$
\end_inset

 is 
\begin_inset Formula $\NP$
\end_inset

-hard, if for every Turing machine 
\begin_inset Formula $M$
\end_inset

 that solves 
\begin_inset Formula $(A,B)$
\end_inset

, the language accepted by 
\begin_inset Formula $M$
\end_inset

 is 
\begin_inset Formula $\NP$
\end_inset

-hard.
\end_layout

\end_deeper
\begin_layout Standard
A promise problem 
\begin_inset Formula $(A,B)$
\end_inset

, with 
\begin_inset Formula $A,B$
\end_inset

 non-empty and 
\begin_inset Formula $A,B\in\NP$
\end_inset

 is a 
\emph on
disjoint 
\begin_inset Formula $\NP$
\end_inset

-pair
\emph default
.
 We define 
\begin_inset Formula $\DisjNP$
\end_inset

 to be the set of all disjoint 
\begin_inset Formula $\NP$
\end_inset

-pairs.
 For this class, we define completeness:
\end_layout

\begin_layout Definition
\begin_inset ERT
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
A disjoint 
\begin_inset Formula $\NP$
\end_inset

-pair 
\begin_inset Formula $(A,B)$
\end_inset

 is 
\begin_inset Formula $\predmo$
\end_inset

-complete, if for every 
\begin_inset Formula $(C,D)\in\DisjNP$
\end_inset

 we have 
\begin_inset Formula $(C,D)\predmo(A,B)$
\end_inset

.
\end_layout

\begin_layout Enumerate
A disjoint 
\begin_inset Formula $\NP$
\end_inset

-pair 
\begin_inset Formula $(A,B)$
\end_inset

 is 
\begin_inset Formula $\predt$
\end_inset

-complete, if for every 
\begin_inset Formula $(C,D)\in\DisjNP$
\end_inset

 we have 
\begin_inset Formula $(C,D)\redt(A,B)$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Standard
We define 
\begin_inset Formula $\predr$
\end_inset

-completeness analogously.
\end_layout

\begin_layout Standard
Evan, Selman and Yacobi found out that if disjoint 
\begin_inset Formula $\NP$
\end_inset

-pairs that are 
\begin_inset Formula $\NP$
\end_inset

-hard do not exist, then there is exist no PKCS with 
\begin_inset Formula $\NP$
\end_inset

-hard cracking problems.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
mention recursively inseparable sets?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The assertion that there are no disjoint 
\begin_inset Formula $\NP$
\end_inset

-pairs that are 
\begin_inset Formula $\NP$
\end_inset

-hard to solve has many more consequences and has been studied well since
 it was formulated as a conjecture by Even, Selman, and Yacobi 
\begin_inset CommandInset citation
LatexCommand cite
key "journals/iandc/EvenSY84"

\end_inset

.
\end_layout

\begin_layout Conjecture
\begin_inset Argument
status open

\begin_layout Plain Layout
ESY
\end_layout

\end_inset

 For every pair of disjoint sets in 
\begin_inset Formula $\NP$
\end_inset

, there is a separator that is not Turing-hard for 
\begin_inset Formula $\NP$
\end_inset

.
 
\begin_inset CommandInset citation
LatexCommand cite
key "journals/iandc/EvenSY84"

\end_inset

 
\end_layout

\begin_layout Standard
If the conjecture holds, then no public-key cryptosystem is 
\begin_inset Formula $\NP$
\end_inset

-hard to crack.
 The following refined version of the ESY-conjecture can be proven to be
 equivalent to 
\begin_inset Formula $\NP\neq\coNP$
\end_inset

, see Theorem 
\begin_inset CommandInset ref
LatexCommand ref
reference "thm:equiv-esymfails-np=conp-polyboundpps"

\end_inset

.
\end_layout

\begin_layout Conjecture
\begin_inset Argument
status open

\begin_layout Plain Layout
ESY-m
\end_layout

\end_inset

 For every pair of disjoint sets in 
\begin_inset Formula $\NP$
\end_inset

, there is a separator that is not many-one-hard for 
\begin_inset Formula $\NP$
\end_inset

.
 
\begin_inset CommandInset citation
LatexCommand cite
key "conf/icalp/HughesPRS12"

\end_inset

 
\end_layout

\begin_layout Standard
We will study consequences of the ESY-conjectures in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:ESY-conjectures"

\end_inset

.
\end_layout

\begin_layout Subsection
Propositional Proof Systems
\begin_inset CommandInset label
LatexCommand label
name "sub:Propositional-Proof-Systems"

\end_inset


\end_layout

\begin_layout Standard
To start with an example, we will have a look at the 
\emph on
resolution principle
\emph default
, which was introduced by Robinson 
\begin_inset CommandInset citation
LatexCommand cite
key "journals/jacm/Robinson65"

\end_inset

.
 Consider a Boolean formula 
\begin_inset Formula $\varphi$
\end_inset

 in conjunctive normal form.
 If 
\begin_inset Formula $\varphi$
\end_inset

 is not satisfiable, the resolution principle provides a way to find a proof
 for this fact.
 To find a proof, the resolution principle iteratively combines two existing
 clauses into a new and shorter clause with equivalent truth value.
 Robinson showed that the resolution principle yields the empty clause eventuall
y for any unsatisfiable formula, and any formula for which the principle
 yields the empty clause is unsatisfiable:
\end_layout

\begin_layout Theorem
\begin_inset Argument
status open

\begin_layout Plain Layout
Resolution Theorem 
\begin_inset CommandInset citation
LatexCommand cite
key "journals/jacm/Robinson65"

\end_inset


\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "thm:resolution-theorem"

\end_inset

 For a formula 
\begin_inset Formula $\varphi$
\end_inset

 in conjunctive normal form, the resolution principle yields the empty clause
 if and only if 
\begin_inset Formula $\varphi$
\end_inset

 is not satisfiable.
\end_layout

\begin_layout Standard
As we can see from the way resolution works, there are exponentially many
 options how to combine the clauses, and not every sequence of combinations
 will yield the empty clause.
 Hence, it is hard to find a sequence of combinations that derive the empty
 clause.
 By Theorem 
\begin_inset CommandInset ref
LatexCommand ref
reference "thm:resolution-theorem"

\end_inset

, this sequence exists if and only if the formula is unsatisfiable.
 As opposed to finding a sequence, given a sequence of combinations, we
 can easily check if this sequence derives the empty clause.
\end_layout

\begin_layout Standard
Using formal terms, let 
\begin_inset Formula $f$
\end_inset

 be defined by
\begin_inset Formula 
\[
f(\langle\varphi,w\rangle)=\begin{cases}
\neg\varphi & \text{if combination sequence \ensuremath{w}applied to \ensuremath{\varphi}yields the empty clause,}\\
\perp & \text{otherwise.}
\end{cases}
\]

\end_inset

The function 
\begin_inset Formula $f$
\end_inset

 is polynomial-time computable.
 By the Resolution Theorem, 
\begin_inset Formula $f$
\end_inset

 only outputs tautologies, and for every tautology 
\begin_inset Formula $\neg\varphi$
\end_inset

, there is an input 
\begin_inset Formula $\langle\varphi,w\rangle$
\end_inset

 such that 
\begin_inset Formula $f(\langle\varphi,w\rangle)=\neg\varphi$
\end_inset

.
 
\end_layout

\begin_layout Standard
Given a combination sequence 
\begin_inset Formula $w$
\end_inset

 that yields the empty clause for 
\begin_inset Formula $\varphi$
\end_inset

, the function 
\begin_inset Formula $f$
\end_inset

 provides a fast way to verify 
\begin_inset Formula $\neg\varphi$
\end_inset

 is a tautology.
 We call 
\begin_inset Formula $f$
\end_inset

 a propositional proof system, and we call 
\begin_inset Formula $\langle\varphi,w\rangle$
\end_inset

 an 
\begin_inset Formula $f$
\end_inset

-proof for 
\begin_inset Formula $\neg\varphi$
\end_inset

.
\end_layout

\begin_layout Definition
A polynomial-time computable function 
\begin_inset Formula $f$
\end_inset

 that is onto the set of tautologies is called a 
\emph on
propositional proof system
\emph default
 or 
\emph on
proof system
\emph default
.
 For any 
\begin_inset Formula $w$
\end_inset

, we say 
\begin_inset Formula $w$
\end_inset

 is a 
\emph on

\begin_inset Formula $f$
\end_inset

-proof for 
\begin_inset Formula $x$
\end_inset


\emph default
 if 
\begin_inset Formula $f(w)=x$
\end_inset

.
 If there is a polynomial 
\begin_inset Formula $p$
\end_inset

, such that for all 
\begin_inset Formula $x$
\end_inset

, and all 
\begin_inset Formula $f$
\end_inset

-proofs 
\begin_inset Formula $w$
\end_inset

 of 
\begin_inset Formula $x$
\end_inset

, we have 
\begin_inset Formula $|w|\leq p(|x|)$
\end_inset

, then 
\begin_inset Formula $f$
\end_inset

 is 
\emph on
polynomially-bounded
\emph default
.
\begin_inset Foot
status open

\begin_layout Plain Layout
At this point it is worth to mention that most literature uses a generalization
 of this term of proof systems.
 A function 
\begin_inset Formula $f$
\end_inset

 is a 
\emph on
proof system for 
\begin_inset Formula $L$
\end_inset


\emph default
, if 
\begin_inset Formula $f$
\end_inset

 is onto 
\begin_inset Formula $L$
\end_inset

 and polynomial-time computable.
 Notion from the definition above can be used accordingly.
 This thesis only uses the 
\emph on
propositional proof systems for 
\begin_inset Formula $\TAUT$
\end_inset


\emph default
, or short, 
\emph on
proof systems
\emph default
.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Cook and Reckhow started a line of research 
\begin_inset CommandInset citation
LatexCommand cite
key "journals/jsyml/CookR79"

\end_inset

 that tries to investigate what the length of the shortest proof of a propositio
nal tautology relative to the length of the tautology is.
 The interest in the length of the proof is motivated by the fact that the
 existence of polynomial-length proofs for all tautologies characterizes
 the question of whether 
\begin_inset Formula $\NP=\coNP$
\end_inset

.
 (A fact we will prove in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Propositional-Proof-Systems"

\end_inset

.) However, no known proof system has been proven to have proofs with length
 bounded by a polynomial.
 To tackle the problem, Cook and Reckhow introduced the notion of simulation
 of proof systems.
\end_layout

\begin_layout Definition
Let 
\begin_inset Formula $f$
\end_inset

 and 
\begin_inset Formula $g$
\end_inset

 be proof systems.
 We say 
\begin_inset Formula $f$
\end_inset

 
\emph on
simulates
\emph default
 
\begin_inset Formula $g$
\end_inset

, if there is a function 
\begin_inset Formula $h$
\end_inset

 such that for all 
\begin_inset Formula $w$
\end_inset

, it holds that 
\begin_inset Formula $f(h(w))=g(w)$
\end_inset

 and 
\begin_inset Formula $|h(w)|\leq p(|w|)$
\end_inset

.
 We call 
\begin_inset Formula $h$
\end_inset

 a 
\emph on
translation function
\emph default
.
 If 
\begin_inset Formula $h$
\end_inset

 is polynomial-time computable, we say 
\begin_inset Formula $f$
\end_inset

 
\emph on
p-simulates
\emph default
 
\begin_inset Formula $g$
\end_inset

.
 A proof system that simulates (p-simulates) every other proof system is
 called 
\emph on
optimal
\emph default
 (
\emph on
p-optimal
\emph default
).
\end_layout

\begin_layout Standard
An more intuitive (and informal) way to give a definition for 
\begin_inset Quotes eld
\end_inset


\begin_inset Formula $f$
\end_inset

 simulates 
\begin_inset Formula $g$
\end_inset


\begin_inset Quotes erd
\end_inset

 is to say that for every tautology 
\begin_inset Formula $\varphi$
\end_inset

, the 
\begin_inset Formula $f$
\end_inset

-proof for 
\begin_inset Formula $\varphi$
\end_inset

 is at most polynomially longer than the 
\begin_inset Formula $g$
\end_inset

-proof of 
\begin_inset Formula $\varphi$
\end_inset

.
 An optimal proof system then has the shortest proofs for tautologies among
 all proof systems, within a polynomial factor.
\end_layout

\begin_layout Standard
However, it is not only unknown whether polynomially-bounded proof systems
 exist, it is also unknown whether optimal or even p-optimal proof systems
 exist.
 To study the existence of optimal and p-optimal proof systems, we will
 therefore study sufficient conditions and implications in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Propositional-Proof-Systems"

\end_inset

.
 To become familiar with these notions, we present a strong sufficient condition
 for the existence of optimal proof systems:
\end_layout

\begin_layout Theorem
\begin_inset CommandInset label
LatexCommand label
name "thm:np-eq-conp-implies-optimalpps"

\end_inset

If 
\begin_inset Formula $\NP=\coNP$
\end_inset

, then there is an optimal proof system.
\end_layout

\begin_layout Proof
Let 
\begin_inset Formula $N$
\end_inset

 be a 
\begin_inset Formula $\NP$
\end_inset

-machine deciding the set of tautologies, 
\begin_inset Formula $\TAUT\in\coNP$
\end_inset

.
 We define 
\begin_inset Formula $f$
\end_inset

 by 
\begin_inset Formula 
\[
f(\langle i,x\rangle)=\begin{cases}
x & \text{if \ensuremath{N}accepts \ensuremath{w}along path \ensuremath{i},}\\
\perp & \text{otherwise}.
\end{cases}
\]

\end_inset

Notice that a proof system does not have to be a total function.
 By definition, 
\begin_inset Formula $f$
\end_inset

 outputs only tautologies, and for every tautology there is an accepting
 path of 
\begin_inset Formula $N$
\end_inset

, so 
\begin_inset Formula $f$
\end_inset

 is onto 
\begin_inset Formula $\TAUT$
\end_inset

.
\end_layout

\begin_layout Proof
To see 
\begin_inset Formula $f$
\end_inset

 is optimal, let 
\begin_inset Formula $f'$
\end_inset

 be an arbitrary proof system.
 There is a function 
\begin_inset Formula $g$
\end_inset

 mapping each tautology 
\begin_inset Formula $w$
\end_inset

 to an accepting path 
\begin_inset Formula $i$
\end_inset

 of 
\begin_inset Formula $N$
\end_inset

.
 Notice that 
\begin_inset Formula $g$
\end_inset

 might not by polynomial-time computable, but is polynomially length-bounded.
 Let 
\begin_inset Formula $w$
\end_inset

 be an 
\begin_inset Formula $f'$
\end_inset

-proof for 
\begin_inset Formula $x$
\end_inset

.
 With 
\begin_inset Formula $g$
\end_inset

, we can translate 
\begin_inset Formula $w$
\end_inset

 into 
\begin_inset Formula $\langle g(w),f'(w)\rangle$
\end_inset

, which is an 
\begin_inset Formula $f$
\end_inset

-proof for 
\begin_inset Formula $x$
\end_inset

.
\end_layout

\begin_layout Standard
As we will see in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Propositional-Proof-Systems"

\end_inset

, the existence of both optimal and p-optimal proof systems can be proven
 under much weaker hypotheses.
\end_layout

\begin_layout Section
Disjoint 
\begin_inset Formula $\NP$
\end_inset

-Pairs
\begin_inset CommandInset label
LatexCommand label
name "sec:Disjoint--Pairs"

\end_inset


\end_layout

\begin_layout Standard
One of the most interesting open questions about disjoint 
\begin_inset Formula $\NP$
\end_inset

-pairs is whether there are complete pairs, either 
\begin_inset Formula $\predmo$
\end_inset

- or 
\begin_inset Formula $\predt$
\end_inset

-complete.
 A proof of the non-existence of either one would prove 
\begin_inset Formula $\NP\neq\coNP$
\end_inset

 and 
\begin_inset Formula $\P\neq\NP$
\end_inset

, but we can also relate complete pairs to propositional proof systems.
 Using the ESY-conjectures, we can also relate disjoint 
\begin_inset Formula $\NP$
\end_inset

-pairs to the 
\begin_inset Formula $\NP$
\end_inset

 vs.
 
\begin_inset Formula $\coNP$
\end_inset

 questions.
\end_layout

\begin_layout Subsection
Reducibility of disjoint pairs
\begin_inset CommandInset label
LatexCommand label
name "sub:Reducibility-of-disjoint"

\end_inset


\end_layout

\begin_layout Standard
The literature contains several different definitions for the reducibility
 of pairs.
 Notice that results from this section apply to all disjoint pairs 
\begin_inset Formula $(A,B)$
\end_inset

; the sets are 
\emph on
not
\emph default
 required to be in 
\begin_inset Formula $\NP$
\end_inset

.
 Additionally to the definition 
\begin_inset CommandInset ref
LatexCommand ref
reference "def:pair-reduction"

\end_inset

 given above in the introduction, Grollmann and Selman 
\begin_inset CommandInset citation
LatexCommand cite
key "journals/siamcomp/GrollmannS88"

\end_inset

 also define the notion of 
\emph on
uniform
\emph default
 reductions of pairs:
\end_layout

\begin_layout Definition
Let 
\begin_inset Formula $(A,B)$
\end_inset

 and 
\begin_inset Formula $(C,D)$
\end_inset

 be disjoint pairs.
 
\begin_inset CommandInset label
LatexCommand label
name "def:uniform-pair-reduction"

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $(A,B)$
\end_inset

 is 
\emph on
uniformly many-one reducible in polynomial time
\emph default
 to 
\begin_inset Formula $(C,D)$
\end_inset

, 
\begin_inset Formula $(A,B)\predunimo(C,D)$
\end_inset

, if there exists a polynomial-time computable function 
\begin_inset Formula $f$
\end_inset

 such that for every separator 
\begin_inset Formula $T\in\Sep(C,D)$
\end_inset

, there exists a separator 
\begin_inset Formula $S\in\Sep(A,B)$
\end_inset

 such that 
\begin_inset Formula $S\redmo T$
\end_inset

 via 
\begin_inset Formula $f$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Formula $(A,B)$
\end_inset

 is 
\emph on
uniformly Turing reducible in polynomial time
\emph default
 to 
\begin_inset Formula $(C,D)$
\end_inset

, 
\begin_inset Formula $(A,B)\predunit(C,D)$
\end_inset

, if there exists a polynomial-time oracle Turing machine 
\begin_inset Formula $M$
\end_inset

 such that for every separator 
\begin_inset Formula $T\in\Sep(C,D)$
\end_inset

, there exists a separator 
\begin_inset Formula $S\in\Sep(A,B)$
\end_inset

 such that 
\begin_inset Formula $S\redt T$
\end_inset

 via 
\begin_inset Formula $M$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Standard
Notice that this definition requires that all separators reduce via the
 same function or machine.
 Definition 
\begin_inset CommandInset ref
LatexCommand ref
reference "def:pair-reduction"

\end_inset

, the definition of nonuniform reducibility, does not require this.
 In spite of this, surprisingly, it turns out that the uniform and nonuniform
 variant of the definition are equivalent.
\end_layout

\begin_layout Standard
Razborov uses yet another definition of many-one reducibility of pairs:
\end_layout

\begin_layout Definition
Let 
\begin_inset Formula $(A,B)$
\end_inset

 and 
\begin_inset Formula $(C,D)$
\end_inset

 be disjoint pairs.
 
\begin_inset Formula $(A,B)$
\end_inset

 is Razborov reducible
\begin_inset Foot
status open

\begin_layout Plain Layout
Razborov reducible is not a term commonly used in the literature.
 We will use it only to prove equivalence to many-one reducibility in Lemma
 
\begin_inset CommandInset ref
LatexCommand ref
reference "lem:reducibilities"

\end_inset

.
\end_layout

\end_inset

 to 
\begin_inset Formula $(C,D)$
\end_inset

, if there exists a polynomial-time computable function 
\begin_inset Formula $\lambda$
\end_inset

 such that 
\begin_inset Formula $\lambda(A)\subseteq C$
\end_inset

 and 
\begin_inset Formula $\lambda(B)\subseteq D$
\end_inset

.
\end_layout

\begin_layout Standard
It turns out that this is equivalent to the many-one reducibility defined
 above as well.
 As a summary of all these definitions, we obtain the following Lemmas.
 A comprehensive proof in in the paper of Glaßer, Selman, Sengupta and Zhang
 
\begin_inset CommandInset citation
LatexCommand cite
after "Theorems 2.8, 2.10, 2.14"
key "journals/eccc/ECCC-TR03-011"

\end_inset

.
\end_layout

\begin_layout Lemma
\begin_inset CommandInset label
LatexCommand label
name "lem:reducibilities"

\end_inset

Let 
\begin_inset Formula $(A,B)$
\end_inset

 and 
\begin_inset Formula $(C,D)$
\end_inset

 be disjoint pairs.
 Then the following assertions are equivalent:
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $(A,B)\predmo(C,D)$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $(A,B)\predunimo(C,D)$
\end_inset


\end_layout

\begin_layout Enumerate
There exists a polynomial-time computable function 
\begin_inset Formula $\lambda$
\end_inset

 such that 
\begin_inset Formula $\lambda(A)\subseteq C$
\end_inset

 and 
\begin_inset Formula $\lambda(B)\subseteq D$
\end_inset

.
\end_layout

\end_deeper
\begin_layout --Separator--

\end_layout

\begin_layout Standard
The following result shows that uniform and non-uniform Turing-reductions
 are equivalent.
 This result was first proven by Grollmann and Selman 
\begin_inset CommandInset citation
LatexCommand cite
key "journals/siamcomp/GrollmannS88"

\end_inset

.
\end_layout

\begin_layout Lemma
Let 
\begin_inset Formula $(A,B)$
\end_inset

 and 
\begin_inset Formula $(C,D)$
\end_inset

 be disjoint pairs.
 Then the following assertions are equivalent:
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $(A,B)\predt(C,D)$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $(A,B)\predunit(C,D)$
\end_inset


\end_layout

\end_deeper
\begin_layout Standard
Therefore, for the rest of this thesis, we will only use the notions of
 many-one and Turing reducibility.
\end_layout

\begin_layout Subsection
ESY-conjectures
\begin_inset CommandInset label
LatexCommand label
name "sub:ESY-conjectures"

\end_inset


\end_layout

\begin_layout Standard
The original ESY-conjecture 
\begin_inset CommandInset citation
LatexCommand cite
key "journals/iandc/EvenSY84"

\end_inset

 is that for every pair of disjoint sets in 
\begin_inset Formula $\NP$
\end_inset

, there is a separator that is not Turing-hard for 
\begin_inset Formula $\NP$
\end_inset

.
 This can be refined by using many-one hardness instead of Turing-hardness.
\end_layout

\begin_layout Definition
For a reduction 
\begin_inset Formula $r$
\end_inset

, we define the ESY-
\begin_inset Formula $r$
\end_inset

 conjecture as follows: For every pair of disjoints sets in 
\begin_inset Formula $\NP$
\end_inset

, there is a separator that is not 
\begin_inset Formula $r$
\end_inset

-hard for 
\begin_inset Formula $\NP$
\end_inset

,
\begin_inset Formula 
\[
\forall_{(A,B)\in\DisjNP}\exists_{S\in\Sep(A,B)}\exists_{L\in\NP}L\nredr S.
\]

\end_inset

Notice, ESY-
\begin_inset Formula $T$
\end_inset

 is the original ESY conjecture.
\end_layout

\begin_layout Standard
The negation of the ESY-
\begin_inset Formula $r$
\end_inset

 conjecture is 
\begin_inset Formula 
\[
\exists_{(A,B)\in\DisjNP}\forall_{S\in\Sep(A,B)}\forall_{L\in\NP}L\redr S,
\]

\end_inset

that is, there exists a disjoint 
\begin_inset Formula $\NP$
\end_inset

-pair 
\begin_inset Formula $(A,B)$
\end_inset

 such that all separators are 
\begin_inset Formula $r$
\end_inset

-hard for 
\begin_inset Formula $\NP$
\end_inset

.
 Since the different reductions imply each other, we obtain a implication
 chain of ESY-conjectures:
\end_layout

\begin_layout Lemma
Each item implies the following item in the list:
\end_layout

\begin_deeper
\begin_layout Enumerate
ESY-
\begin_inset Formula $m$
\end_inset

 does not hold.
\end_layout

\begin_layout Enumerate
ESY-
\begin_inset Formula $tt$
\end_inset

 does not hold.
\end_layout

\begin_layout Enumerate
ESY-
\begin_inset Formula $T$
\end_inset

 (the original ESY conjecture) does not hold.
\end_layout

\end_deeper
\begin_layout Standard
This list can be extended to other reductions as well.
 In this thesis, we mention these specific reductions because there are
 known results that relate to these assertions.
\end_layout

\begin_layout Standard
The ESY-conjectures immediately relate to the existence of complete pairs,
 as we can see from the negated ESY-
\begin_inset Formula $r$
\end_inset

 statement.
\end_layout

\begin_layout Theorem
If ESY-
\begin_inset Formula $r$
\end_inset

 does not hold, then there exists a 
\begin_inset Formula $r$
\end_inset

-complete disjoint 
\begin_inset Formula $\NP$
\end_inset

 pair.
\end_layout

\begin_layout Proof
Assume that ESY-
\begin_inset Formula $r$
\end_inset

 does not hold, then there is a pair 
\begin_inset Formula $(A,B)$
\end_inset

 of disjoint sets in 
\begin_inset Formula $\NP$
\end_inset

 such that every separator is 
\begin_inset Formula $r$
\end_inset

-hard for 
\begin_inset Formula $\NP$
\end_inset

.
 We claim 
\begin_inset Formula $(A,B)$
\end_inset

 is 
\begin_inset Formula $r$
\end_inset

-complete for 
\begin_inset Formula $\DisjNP$
\end_inset

.
 Let 
\begin_inset Formula $(C,D)\in\DisjNP$
\end_inset

, and let 
\begin_inset Formula $S$
\end_inset

 be any separator for 
\begin_inset Formula $(A,B)$
\end_inset

.
 Then since 
\begin_inset Formula $C\in\NP$
\end_inset

 and 
\begin_inset Formula $S$
\end_inset

 is 
\begin_inset Formula $r$
\end_inset

-hard for 
\begin_inset Formula $\NP$
\end_inset

, we have 
\begin_inset Formula $C\redr S$
\end_inset

.
 This proves 
\begin_inset Formula $C$
\end_inset

, which is a separator of 
\begin_inset Formula $(C,D)$
\end_inset

, reduces to any separator of 
\begin_inset Formula $(A,B)$
\end_inset

.
 By definition 
\begin_inset CommandInset ref
LatexCommand ref
reference "def:pair-reduction"

\end_inset

, we have 
\begin_inset Formula $(C,D)\predr(A,B)$
\end_inset

 and thus 
\begin_inset Formula $(A,B)$
\end_inset

 is 
\begin_inset Formula $r$
\end_inset

-complete for 
\begin_inset Formula $\DisjNP$
\end_inset

.
\end_layout

\begin_layout Standard
As mentioned above, the refinements of the (original) ESY-
\begin_inset Formula $T$
\end_inset

 have interesting relations to computational complexity as well.
 ESY-
\begin_inset Formula $m$
\end_inset

 connects to the 
\begin_inset Formula $\NP$
\end_inset

 vs.
 
\begin_inset Formula $\coNP$
\end_inset

 question, and ESY-
\begin_inset Formula $tt$
\end_inset

 relates to the question whether 
\begin_inset Formula $\NP=\UP$
\end_inset

.
\begin_inset Note Note
status open

\begin_layout Plain Layout
be precise
\end_layout

\end_inset


\end_layout

\begin_layout Theorem
\begin_inset CommandInset citation
LatexCommand cite
key "journals/eccc/ECCC-TR03-011"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "thm:equiv-esymfails-np=conp-polyboundpps"

\end_inset

The following assertions are equivalent.
\end_layout

\begin_deeper
\begin_layout Enumerate
The ESY-m conjecture does not hold, that is, there exists a disjoint 
\begin_inset Formula $\NP$
\end_inset

-pair such that all separators are many-one-hard for 
\begin_inset Formula $\NP$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\NP=\coNP$
\end_inset


\end_layout

\end_deeper
\begin_layout Proof
Assume ESY-
\begin_inset Formula $m$
\end_inset

 does not hold.
 Let 
\begin_inset Formula $(A,B)\in\DisjNP$
\end_inset

 such that all separators are many-one-hard for 
\begin_inset Formula $\NP$
\end_inset

.
 The set 
\begin_inset Formula $\overline{B}$
\end_inset

 is a separator of 
\begin_inset Formula $(A,B)$
\end_inset

, and therefore 
\begin_inset Formula $\SAT\redmo\overline{B}$
\end_inset

.
 Thus, 
\begin_inset Formula $\overline{\SAT}\redmo B$
\end_inset

 which means that 
\begin_inset Formula $\overline{\SAT}\in\NP$
\end_inset

.
 It follows by the completeness of 
\begin_inset Formula $\SAT$
\end_inset

 that 
\begin_inset Formula $\NP=\coNP$
\end_inset

.
\end_layout

\begin_layout Proof
Now assume 
\begin_inset Formula $\NP=\coNP$
\end_inset

.
 The pair 
\begin_inset Formula $(\SAT,\overline{\SAT})$
\end_inset

 only has separators that are many-one-hard for 
\begin_inset Formula $\NP$
\end_inset

.
\end_layout

\begin_layout Theorem
\begin_inset CommandInset label
LatexCommand label
name "thm:NP=UP-implies-ESY-tt-does-not-hold"

\end_inset

If 
\begin_inset Formula $\NP=\UP$
\end_inset

, then ESY-
\begin_inset Formula $tt$
\end_inset

 does not hold, that is, there exists a disjoint 
\begin_inset Formula $\NP$
\end_inset

-pair such that all separators are truth-table-hard for 
\begin_inset Formula $\NP$
\end_inset

.
\end_layout

\begin_layout Standard
For a proof please refer to the work of Hughes, Mandal, Pavan, Russell and
 Selman 
\begin_inset CommandInset citation
LatexCommand cite
key "conf/icalp/HughesPRS12"

\end_inset

.
\end_layout

\begin_layout Section
Propositional Proof Systems
\begin_inset CommandInset label
LatexCommand label
name "sec:Propositional-Proof-Systems"

\end_inset


\end_layout

\begin_layout Subsection
Polynomially-bounded proof systems and 
\begin_inset Formula $\NP=\coNP$
\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sub:Polynomially-bounded-proof-syste"

\end_inset


\end_layout

\begin_layout Standard
We will show that the existence of polynomially-bounded proof systems characteri
zes the statement 
\begin_inset Formula $\NP=\coNP$
\end_inset

.
 The proof is due to Cook and Reckhow 
\begin_inset CommandInset citation
LatexCommand cite
key "journals/jsyml/CookR79"

\end_inset

.
\end_layout

\begin_layout Theorem
\begin_inset CommandInset label
LatexCommand label
name "thm:poly-bounded-ps-iff-np-eq-conp"

\end_inset

There is a polynomially-bounded propositional proof system if and only if
 
\begin_inset Formula $\NP=\coNP$
\end_inset

.
\end_layout

\begin_layout Proof
Assume 
\begin_inset Formula $\NP=\coNP$
\end_inset

 and let 
\begin_inset Formula $M$
\end_inset

 be an 
\begin_inset Formula $\NP$
\end_inset

-machine accepting 
\begin_inset Formula $\TAUT$
\end_inset

.
 We define a proof system 
\begin_inset Formula $f$
\end_inset

, in which all proofs are polynomially length bounded:
\begin_inset Formula 
\[
f(\langle\varphi,w\rangle)=\begin{cases}
\varphi & \text{if \ensuremath{w}is an accepting path of \ensuremath{M}on input \ensuremath{\varphi}},\\
\true & \text{otherwise}.
\end{cases}
\]

\end_inset

Since 
\begin_inset Formula $f$
\end_inset

 only considers one path in the computation of 
\begin_inset Formula $M$
\end_inset

, it is polynomial-time computable.
 Also, 
\begin_inset Formula $f$
\end_inset

 only outputs tautologies.
 Therefore, 
\begin_inset Formula $f$
\end_inset

 is a proof system.
 As there is an accepting path in the computation of 
\begin_inset Formula $M$
\end_inset

 for every tautology 
\begin_inset Formula $\varphi$
\end_inset

, all tautologies have polynomial-length proofs.
\end_layout

\begin_layout Proof
To prove the converse, suppose there is a polynomially-bounded proof system
 
\begin_inset Formula $f$
\end_inset

.
 Since the complement of 
\begin_inset Formula $\TAUT$
\end_inset

 is 
\begin_inset Formula $\NP$
\end_inset

-complete, it suffices to show 
\begin_inset Formula $\TAUT\in\NP$
\end_inset

.
 Let 
\begin_inset Formula $M$
\end_inset

 be a nondeterministic Turing machine such that on input 
\begin_inset Formula $\varphi$
\end_inset

, 
\begin_inset Formula $M$
\end_inset

 guesses an 
\begin_inset Formula $f$
\end_inset

-proof 
\begin_inset Formula $w$
\end_inset

 of polynomial length and calculates 
\begin_inset Formula $f(w)$
\end_inset

.
 The machine then accepts if and only if 
\begin_inset Formula $f(w)=\varphi$
\end_inset

.
 Hence, 
\begin_inset Formula $M$
\end_inset

 is an 
\begin_inset Formula $\NP$
\end_inset

-machine accepting 
\begin_inset Formula $\TAUT$
\end_inset

.
\end_layout

\begin_layout Standard
Cook and Reckhow introduced the notion of optimal proof systems in order
 to prove 
\begin_inset Formula $\NP\neq\coNP$
\end_inset

, that is, to prove there is no polynomially-bounded proof system.
 We call a proof system 
\begin_inset Formula $f$
\end_inset

 
\emph on
optimal
\emph default
, if 
\begin_inset Formula $f$
\end_inset

-proofs are the shortest proofs among all proof systems (with respect to
 a polynomial factor).
 Proving the existence of an optimal proof system with proofs that are not
 within polynomial length shows 
\begin_inset Formula $\NP\neq\coNP$
\end_inset

.
\end_layout

\begin_layout Standard
The existence of both polynomially bounded and optimal proof systems is
 unknown.
 However, we are able to prove some necessary and sufficient conditions
 for the existence of optimal proof systems.
 There are oracles relative to which optimal proof systems exist and relative
 to which optimal proof systems do not exist, see Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Existence-Optimal-and-p-optimal-ps"

\end_inset

.
\end_layout

\begin_layout Subsection
Sufficient Conditions for the Existence of Optimal Proof Systems
\begin_inset CommandInset label
LatexCommand label
name "sub:Sufficient-Conditions-for"

\end_inset


\end_layout

\begin_layout Standard
To investigate further the question of whether optimal or even p-optimal
 proof systems exist, first Krajíček and Pudlák 
\begin_inset CommandInset citation
LatexCommand cite
key "journals/jsyml/KrajicekP89"

\end_inset

 and later Meßner and Torán proved sufficient conditions for the existence
 of such proof systems.
 The results reveal a symmetry for sufficient conditions for optimal and
 p-optimal proof systems:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[->,>=stealth',shorten >=1pt,node distance=3.0cm,     
  semithick, /tikz/initial text=]   
\end_layout

\begin_layout Plain Layout


\backslash
tikzstyle{every state}=[fill=none,draw=black,text=black]
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout


\backslash
node (A0)               {$
\backslash
P=
\backslash
NP$};   
\end_layout

\begin_layout Plain Layout


\backslash
node (B0) [right of=A0] {$
\backslash
E=
\backslash
NE$};
\end_layout

\begin_layout Plain Layout


\backslash
node (C0) [right of=B0] {$
\backslash
EE=
\backslash
NEE$};
\end_layout

\begin_layout Plain Layout


\backslash
node (D0) [right of=C0,align=center] {$
\backslash
exists$ an p-optimal
\backslash

\backslash
proof system};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
node (A1) [below=1cm of A0] {$
\backslash
NP=
\backslash
coNP$};   
\end_layout

\begin_layout Plain Layout


\backslash
node (B1) [right of=A1] {$
\backslash
NE=
\backslash
coNE$};
\end_layout

\begin_layout Plain Layout


\backslash
node (C1) [right of=B1] {$
\backslash
NEE=
\backslash
coNEE$};
\end_layout

\begin_layout Plain Layout


\backslash
node (D1) [right of=C1,align=center] {$
\backslash
exists$ an optimal
\backslash

\backslash
proof system};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
path[every node/.style={sloped,anchor=south,auto=false}]
\end_layout

\begin_layout Plain Layout

 (A0) edge (B0)
\end_layout

\begin_layout Plain Layout

 (B0) edge (C0)
\end_layout

\begin_layout Plain Layout

 (C0) edge (D0)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

 (A1) edge (B1)
\end_layout

\begin_layout Plain Layout

 (B1) edge (C1)
\end_layout

\begin_layout Plain Layout

 (C1) edge (D1)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

 (A0) edge (A1)
\end_layout

\begin_layout Plain Layout

 (B0) edge (B1)
\end_layout

\begin_layout Plain Layout

 (C0) edge (C1)
\end_layout

\begin_layout Plain Layout

 (D0) edge (D1)
\end_layout

\begin_layout Plain Layout

;
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The symmetric structure of sufficient conditions for optimal and p-optimal
 propositional proof systems.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
We define 
\begin_inset Formula $\EE$
\end_inset

 to be the class of languages that can be decided in time 
\begin_inset Formula $2^{O(2^{n})}$
\end_inset

.
 A language 
\begin_inset Formula $L$
\end_inset

 is called 
\emph on
almost-tally
\emph default
, if every string in 
\begin_inset Formula $L$
\end_inset

 is of the form 
\begin_inset Formula $0^{*}10^{*}$
\end_inset

.
 By 
\begin_inset Formula $\powerset(0^{*}10^{*})$
\end_inset

 we denote the class of all almost-tally languages.
 Meßner and Torán use the notion of almost-tally languages to obtain an
 even weaker sufficient condition than mentioned in the chart:
\end_layout

\begin_layout Theorem
\begin_inset CommandInset label
LatexCommand label
name "thm:sufficient-cond-for-optimal-pps"

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
If all almost-tally languages in 
\begin_inset Formula $\NEE$
\end_inset

 also belong to 
\begin_inset Formula $\EE$
\end_inset

, then there exists a p-optimal propositional proof system.
\end_layout

\begin_layout Enumerate
If all almost-tally languages in 
\begin_inset Formula $\coNEE$
\end_inset

 also belong to 
\begin_inset Formula $\NEE$
\end_inset

, then there exists an optimal propositional proof system.
\end_layout

\end_deeper
\begin_layout Standard
For the proof of 
\begin_inset CommandInset ref
LatexCommand ref
reference "thm:sufficient-cond-for-optimal-pps"

\end_inset

.1, please refer to the original paper by Meßner and Torán 
\begin_inset CommandInset citation
LatexCommand cite
key "journals/eccc/ECCC-TR97-026"

\end_inset

.
\end_layout

\begin_layout Standard
The proof of 
\begin_inset CommandInset ref
LatexCommand ref
reference "thm:sufficient-cond-for-optimal-pps"

\end_inset

.2 is based on constructing the almost-tally language 
\begin_inset Formula $T$
\end_inset

 that belongs to 
\begin_inset Formula $\coNEE$
\end_inset

.
 By the hypothesis, we can then assume 
\begin_inset Formula $T\in\EE$
\end_inset

 and 
\begin_inset Formula $T\in\NEE$
\end_inset

 respectively and define a proof system based on 
\begin_inset Formula $T$
\end_inset

.
\end_layout

\begin_layout Proof
\begin_inset Argument
status open

\begin_layout Plain Layout
Proof of 
\begin_inset CommandInset ref
LatexCommand ref
reference "thm:sufficient-cond-for-optimal-pps"

\end_inset

.2
\end_layout

\end_inset

Let 
\begin_inset Formula $M_{1},M_{2},...$
\end_inset

 be an enumeration of deterministic Turing transducers such that there is
 a universal Turing transducer that can simulate 
\begin_inset Formula $k$
\end_inset

 steps of 
\begin_inset Formula $M_{i}$
\end_inset

 in 
\begin_inset Formula $(ik)^{2}$
\end_inset

 steps.
 Define the almost-tally language 
\begin_inset Formula 
\begin{eqnarray*}
T=\{0^{j}10^{i} & \mid & \text{for all words \ensuremath{w}of length at most \ensuremath{2^{2^{j+1+i}}}:}\\
 &  & (\text{if \ensuremath{M_{i}}halts on \ensuremath{w}in at most \ensuremath{2^{2^{j+1+i}}}steps, then \ensuremath{M_{i}}outputs a tautology})\}.
\end{eqnarray*}

\end_inset

 To see that 
\begin_inset Formula $T$
\end_inset

 is a 
\begin_inset Formula $\coNEE$
\end_inset

-language, we rewrite 
\begin_inset Formula $T$
\end_inset

 as 
\begin_inset Formula 
\begin{eqnarray*}
T=\{0^{j}10^{i} & \mid & \forall w,y\in\Sigma^{\leq2^{2^{j+1+i}}}:\\
 &  & \left[M_{i}(w)\text{ halts in \ensuremath{2^{2^{j+1+i}}}steps with output }\varphi\implies\varphi(y)=\true)\right]\},
\end{eqnarray*}

\end_inset

where the condition written in square brackets can be decided in deterministic
 double-exponential time.
 By the hypothesis, we thus have 
\begin_inset Formula $T\in\NEE$
\end_inset

.
 Let 
\begin_inset Formula $N_{T}$
\end_inset

 denote the nondeterministic Turing machine deciding 
\begin_inset Formula $T$
\end_inset

 in time 
\begin_inset Formula $2^{c2^{n}}$
\end_inset

, 
\begin_inset Formula $c\geq1$
\end_inset

.
\end_layout

\begin_layout Proof
Based on 
\begin_inset Formula $N_{T}$
\end_inset

, we will now define a proof system 
\begin_inset Formula $f$
\end_inset

, 
\begin_inset Formula 
\[
f(\langle0^{j}10^{i},0^{s},\alpha,w\rangle)=\begin{cases}
M_{i}(w) & \text{if for \ensuremath{l=j+1+i}all of the following requirements are met:}\\
 & \text{(a) \ensuremath{s\geq2^{2^{l}}}},\\
 & \text{(b) \ensuremath{|w|\leq2^{2^{l}}}},\\
 & \text{\text{(c) \ensuremath{M_{i}}on input \ensuremath{w}halts in at most \ensuremath{2^{2^{l}}}steps},}\\
 & \text{(d) \ensuremath{\alpha}is an accepting computation of \ensuremath{N_{T}}on input \ensuremath{0^{j}10^{i}}},\\
\true & \text{otherwise.}
\end{cases}
\]

\end_inset

First, we will show that 
\begin_inset Formula $f$
\end_inset

 is a proof system.
 In both cases of the definition, 
\begin_inset Formula $f$
\end_inset

 only outputs tautologies.
 Also, for any given tautology 
\begin_inset Formula $\varphi$
\end_inset

, there is a 
\begin_inset Formula $k$
\end_inset

 such that 
\begin_inset Formula $M_{k}$
\end_inset

 outputs 
\begin_inset Formula $\varphi$
\end_inset

 on any input with length at least 
\begin_inset Formula $|\varphi|$
\end_inset

, and true for all shorter inputs.
 Hence, 
\begin_inset Formula $10^{k}\in T$
\end_inset

.
 Therefore, there is an 
\begin_inset Formula $\alpha$
\end_inset

 such that 
\begin_inset Formula $\langle10^{k},0^{2^{2^{k+1}}},\alpha,0^{|\varphi|}\rangle$
\end_inset

 is a 
\begin_inset Formula $f$
\end_inset

-proof for 
\begin_inset Formula $\varphi$
\end_inset

.
 This confirms 
\begin_inset Formula $f(\Sigma^{*})=\TAUT$
\end_inset

.
 As a last condition, we need to verify 
\begin_inset Formula $f$
\end_inset

 is polynomial-time computable: a machine computing 
\begin_inset Formula $f$
\end_inset

 first checks if 
\begin_inset Formula $s\geq2^{2^{l}}$
\end_inset

.
 If this is true, conditions (b), (c) and (d) can be verified in polynomial-time
 in 
\begin_inset Formula $|0^{s}|$
\end_inset

.
 If the check exceeds the polynomial-time limit, condition (a) does not
 hold and 
\begin_inset Formula $\true$
\end_inset

 will be output.
 Hence, 
\begin_inset Formula $f$
\end_inset

 is polynomial-time computable.
\end_layout

\begin_layout Proof
To demonstrate that 
\begin_inset Formula $f$
\end_inset

 is an optimal proof system, let 
\begin_inset Formula $g$
\end_inset

 be any other proof system.
 For a given 
\begin_inset Formula $g$
\end_inset

-proof 
\begin_inset Formula $w$
\end_inset

, where 
\begin_inset Formula $g$
\end_inset

 is computed by transducer 
\begin_inset Formula $M_{i}$
\end_inset

 with time bound 
\begin_inset Formula $n^{k}+k$
\end_inset

, we will see that there is an 
\begin_inset Formula $\alpha$
\end_inset

 such that 
\begin_inset Formula 
\begin{eqnarray*}
w' & = & \langle0^{j}10^{i},0^{s},\alpha,w\rangle,\text{ where}\\
s & = & 2^{c2^{j+1+i}}\\
j & = & \max(0,\left\lceil \log\log\left(|w|^{k}+k\right)\right\rceil -i-1)
\end{eqnarray*}

\end_inset

is an 
\begin_inset Formula $f$
\end_inset

-proof for the same tautology, because the string 
\begin_inset Formula $w'$
\end_inset

 satisfies all conditions in the first case of the definition of 
\begin_inset Formula $f$
\end_inset

, and therefore 
\begin_inset Formula $f(w')=M_{i}(w)=g(w)$
\end_inset

: (a) is satisfied by the choice of 
\begin_inset Formula $s$
\end_inset

, (b) holds in both of the following cases by choice of 
\begin_inset Formula $j$
\end_inset

.
 
\begin_inset Formula 
\begin{eqnarray*}
\text{If }j>0, &  & 2^{2^{l}}\geq2^{2^{j}}=2^{2^{\left\lceil \log\log\left(|w|^{k}+k\right)\right\rceil }}\geq2^{2^{\log\log\left(|w|^{k}+k\right)}}=|w|^{k}+k\geq|w|.\\
\text{If }j=0, &  & \left\lceil \log\log\left(|w|^{k}+k\right)\right\rceil -i-1\leq0\implies\left\lceil \log\log\left(|w|^{k}+k\right)\right\rceil \leq i+1\\
 &  & \implies\log\log\left(|w|^{k}+k\right)\leq i+1\implies|w|^{k}+k\leq2^{2^{i+1}}=2^{2^{l}}\implies|w|\leq|w|^{k}+k\leq2^{2^{l}}.
\end{eqnarray*}

\end_inset

Condition (c), again, holds by choice of 
\begin_inset Formula $j$
\end_inset

: The runtime of 
\begin_inset Formula $M_{i}$
\end_inset

 on input 
\begin_inset Formula $w$
\end_inset

 is bounded by 
\begin_inset Formula $|w|^{k}+k$
\end_inset

, which is, as we have just seen, in both cases less or equal than 
\begin_inset Formula $2^{2^{l}}$
\end_inset

.
 For condition (d), remember that 
\begin_inset Formula $M_{i}$
\end_inset

 is computing a proof system and thus only outputs tautologies, which implies
 
\begin_inset Formula $0^{j}10^{i}\in T$
\end_inset

.
 Therefore, there is an 
\begin_inset Formula $\alpha$
\end_inset

 that is an accepting computation of 
\begin_inset Formula $N_{T}$
\end_inset

 on input 
\begin_inset Formula $0^{j}10^{i}$
\end_inset

.
\end_layout

\begin_layout Proof
It remains to show that 
\begin_inset Formula $|w'|\leq p(|w|)$
\end_inset

.
 To see this, it is sufficient to show that 
\begin_inset Formula $j$
\end_inset

, 
\begin_inset Formula $i$
\end_inset

, 
\begin_inset Formula $s$
\end_inset

 and 
\begin_inset Formula $|\alpha|$
\end_inset

 are polynomially bounded in 
\begin_inset Formula $|w|$
\end_inset

.
 The Gödel-number 
\begin_inset Formula $i$
\end_inset

 is a constant in 
\begin_inset Formula $|w|$
\end_inset

.
 Parameter 
\begin_inset Formula $j$
\end_inset

 is double-logarithmic, and thus 
\begin_inset Formula $s$
\end_inset

 is polynomially bounded in 
\begin_inset Formula $|w|$
\end_inset

.
 The computation path 
\begin_inset Formula $\alpha$
\end_inset

 has double-exponential length in 
\begin_inset Formula $i$
\end_inset

 and 
\begin_inset Formula $j$
\end_inset

 and is therefore polynomially bounded in 
\begin_inset Formula $|w|$
\end_inset

.
\end_layout

\begin_layout Standard
Some might wonder if the same proof technique is working for the assumption
 of 
\begin_inset Formula $\NEEE=\coNEEE$
\end_inset

.
 However, in the case of triple exponential time, the output 
\begin_inset Formula $w'$
\end_inset

 of the translation function is not within polynomial bounds of 
\begin_inset Formula $w$
\end_inset

, as the length of the computation path 
\begin_inset Formula $\alpha$
\end_inset

 is
\begin_inset Formula 
\[
2^{c2^{2^{i+j+1}}}=2^{c2^{2^{(i+1)+\log\log\log|w|}}}=2^{c\cdot(\log|w|)^{2^{i+1}}}>\text{poly }|w|.
\]

\end_inset


\end_layout

\begin_layout Subsection
Implications of the Existence of Optimal Proof Systems
\begin_inset CommandInset label
LatexCommand label
name "sub:Implications-of-the-existence-of-optimal-proof-systems"

\end_inset


\end_layout

\begin_layout Standard
In this section, we will present a result of Köbler, Meßner and Torán 
\begin_inset CommandInset citation
LatexCommand cite
key "journals/iandc/KoblerMT03"

\end_inset

.
 In particular, we will show that the existence of an optimal proof system
 implies the existence of a complete set of 
\begin_inset Formula $\NP\cap\SPARSE$
\end_inset

.
 Since Buhrman et al.
 showed the existence of an oracle such that there are no complete sets
 for 
\begin_inset Formula $\NP\cap\SPARSE$
\end_inset

, it follows that there are no optimal proof systems relative to this oracle.
 As a further note, Krajíček and Pudlák 
\begin_inset CommandInset citation
LatexCommand cite
key "journals/jsyml/KrajicekP89,journals/iandc/KoblerMT03"

\end_inset

 directly constructed an oracle such that there are no optimal proof systems.
\end_layout

\begin_layout Standard
We tend to believe that there are no complete sets for 
\begin_inset Formula $\NP\cap\SPARSE$
\end_inset

, therefore the result by Köbler, Meßner and Torán provides evidence that
 there are no optimal proof systems.
\end_layout

\begin_layout Theorem
If there is an optimal proof system, then complete sets for 
\begin_inset Formula $\NP\cap\SPARSE$
\end_inset

 exist.
\end_layout

\begin_layout Proof
We define the set 
\begin_inset Formula $SP$
\end_inset

, containing descriptions of non-deterministic Turing machines that have
 runtime bounded by 
\begin_inset Formula $l$
\end_inset

 and accept, up to a given length 
\begin_inset Formula $n$
\end_inset

, only 
\begin_inset Formula $l$
\end_inset

 different strings: 
\begin_inset Formula 
\begin{eqnarray*}
 & SP=\{\langle N,0^{l},0^{n}\rangle\mid & \text{(1)}\, N\,\text{is a non-deterministic Turing machine}\\
 &  & \text{\text{(2) there are at most \ensuremath{l}pairs \ensuremath{(x_{i},y_{i})}such that}}\\
 &  & \qquad\text{(a) all \ensuremath{x_{i}}are distinct}\\
 &  & \qquad\text{(b) all \ensuremath{y_{i}}are distinct}\\
 &  & \qquad\text{(c) }|x_{i}|\leq n,|y_{i}|\leq l\\
 &  & \qquad\text{(d) \ensuremath{N}accepts \ensuremath{x_{i}}on path \ensuremath{y_{i}}}\}
\end{eqnarray*}

\end_inset

A tuple 
\begin_inset Formula $\langle N,0^{l},0^{n}\rangle$
\end_inset

 does not belong to 
\begin_inset Formula $SP$
\end_inset

 if and only if there exist 
\begin_inset Formula $l+1$
\end_inset

 inputs 
\begin_inset Formula $x_{i}$
\end_inset

 of length at most 
\begin_inset Formula $n$
\end_inset

 that are accepted by 
\begin_inset Formula $N$
\end_inset

, which proves that 
\begin_inset Formula $SP\in\coNP$
\end_inset

.
\end_layout

\begin_layout Proof
We will now define subsets of 
\begin_inset Formula $SP$
\end_inset

 that can be decided in deterministic polynomial time.
 Assume 
\begin_inset Formula $M$
\end_inset

 is a non-deterministic Turing machine with polynomial runtime 
\begin_inset Formula $q$
\end_inset

 such that for every 
\begin_inset Formula $n$
\end_inset

, 
\begin_inset Formula $M$
\end_inset

 accepts at most 
\begin_inset Formula $q(n)$
\end_inset

 strings of length at most 
\begin_inset Formula $n$
\end_inset

.
 That is, the language accepted by 
\begin_inset Formula $M$
\end_inset

, 
\begin_inset Formula $L(M)$
\end_inset

 is 
\begin_inset Formula $q$
\end_inset

-sparse.
 Observe that the set 
\begin_inset Formula $SP_{M}=\{\langle M,0^{q(n)},0^{n}\rangle\mid n\geq1\}$
\end_inset

 is a subset of 
\begin_inset Formula $SP$
\end_inset

, as there are at most 
\begin_inset Formula $l=q(n)$
\end_inset

 pairwise different inputs accepted by 
\begin_inset Formula $M$
\end_inset

 for each 
\begin_inset Formula $n$
\end_inset

 (see condition (2)(a) in the definition of 
\begin_inset Formula $SP$
\end_inset

).
 For every such 
\begin_inset Formula $M$
\end_inset

, there is a deterministic polynomial-time Turing machine 
\begin_inset Formula $T_{M}$
\end_inset

 that decides 
\begin_inset Formula $SP_{M}$
\end_inset

: given an input 
\begin_inset Formula $\langle N,0^{l},0^{n}\rangle$
\end_inset

, it checks whether 
\begin_inset Formula $N=M$
\end_inset

 and 
\begin_inset Formula $l=q(n)$
\end_inset

, where 
\begin_inset Formula $M$
\end_inset

 and 
\begin_inset Formula $q$
\end_inset

 are coded into 
\begin_inset Formula $T_{M}$
\end_inset

's program.
 We will use 
\begin_inset Formula $SP_{M}$
\end_inset

 later to show the completeness.
\end_layout

\begin_layout Proof
We are going to define the set 
\begin_inset Formula $S\in\NP\cap\SPARSE$
\end_inset

, and prove it is complete for that class.
 The fact that there is an optimal proof system will yield the many-one
 reduction.
 So let 
\begin_inset Formula $h$
\end_inset

 be an optimal proof system and let 
\begin_inset Formula $SP$
\end_inset

 reduce to 
\begin_inset Formula $\TAUT$
\end_inset

 via 
\begin_inset Formula $\gamma,$
\end_inset

 which gives us 
\begin_inset Formula $z\in SP\iff\gamma(z)\in\TAUT$
\end_inset

.
 Then we define 
\begin_inset Formula 
\begin{eqnarray*}
 & S=\{\langle0^{N},0^{j},x\rangle\mid & \text{(I) \ensuremath{N}is non-det. Turing machine}\\
 &  & \text{(II) there exists \ensuremath{l}and \ensuremath{w}, \ensuremath{|w|\leq j}},\\
 &  & \qquad\text{(a) }h(w)=\gamma(\langle N,0^{l},0^{|x|}\rangle),\\
 &  & \qquad\text{(b) \ensuremath{N}accepts \ensuremath{x}in at most \ensuremath{l}steps}.\}
\end{eqnarray*}

\end_inset

We can see 
\begin_inset Formula $S$
\end_inset

 belongs to 
\begin_inset Formula $\NP$
\end_inset

 because of the polynomial-time condition on the tuple.
 To see 
\begin_inset Formula $S$
\end_inset

 is sparse, first fix an 
\begin_inset Formula $N$
\end_inset

 and 
\begin_inset Formula $j$
\end_inset

.
 By condition (II)(b), every 
\begin_inset Formula $x$
\end_inset

 such that 
\begin_inset Formula $\langle0^{N},0^{j},x\rangle\in S$
\end_inset

 is accepted by 
\begin_inset Formula $N$
\end_inset

 in at most 
\begin_inset Formula $l$
\end_inset

 steps.
 Since 
\begin_inset Formula $\langle N,0^{l},0^{|x|}\rangle\in SP$
\end_inset

 by (II)(a), we have 
\begin_inset Formula $N$
\end_inset

 only accepting at most 
\begin_inset Formula $l$
\end_inset

 inputs of length at most 
\begin_inset Formula $|x|$
\end_inset

.
 For the fixed 
\begin_inset Formula $N$
\end_inset

 and 
\begin_inset Formula $j$
\end_inset

 we thus have at most 
\begin_inset Formula $l$
\end_inset

 tuples 
\begin_inset Formula $\langle0^{N},0^{j},x\rangle\in S$
\end_inset

.
 By condition (II)(a), we can relate this upper bound to the length of the
 tuples: since 
\begin_inset Formula $h$
\end_inset

 and 
\begin_inset Formula $\gamma$
\end_inset

 are both polynomial length bounded, 
\begin_inset Formula $l$
\end_inset

 is bounded by some polynomial in 
\begin_inset Formula $j$
\end_inset

.
 Therefore exist for any given 
\begin_inset Formula $N$
\end_inset

 and 
\begin_inset Formula $j$
\end_inset

 only a in 
\begin_inset Formula $j$
\end_inset

 polynomial number of tuples in 
\begin_inset Formula $S$
\end_inset

.
 By the tally encoding of 
\begin_inset Formula $N$
\end_inset

 and 
\begin_inset Formula $j$
\end_inset

, there exist only a polynomial number of different 
\begin_inset Formula $N$
\end_inset

 and 
\begin_inset Formula $j$
\end_inset

 for any fixed length 
\begin_inset Formula $k$
\end_inset

 of tuples in 
\begin_inset Formula $S$
\end_inset

.
\end_layout

\begin_layout Proof
Now let's see how every set in 
\begin_inset Formula $\NP\cap\SPARSE$
\end_inset

 many-one reduces to 
\begin_inset Formula $S$
\end_inset

.
 Let 
\begin_inset Formula $S'$
\end_inset

 be a set in 
\begin_inset Formula $\NP\cap\SPARSE$
\end_inset

 that is accepted by 
\begin_inset Formula $M$
\end_inset

 in time 
\begin_inset Formula $q$
\end_inset

.
 As shown before, 
\begin_inset Formula $SP_{M}$
\end_inset

 can then be decided in polynomial time.
 This enables us to define a polynomial-time function 
\begin_inset Formula 
\[
g_{M}(x)=\begin{cases}
\gamma(x) & \text{if \ensuremath{x\in SP_{M},}}\\
\perp & \text{otherwise}
\end{cases}
\]

\end_inset

with range 
\begin_inset Formula $\TAUT$
\end_inset

.
 That is, 
\begin_inset Formula $g_{M}$
\end_inset

 is a proof system and thus simulated by the optimal proof system 
\begin_inset Formula $h$
\end_inset

.
 Hence, there exists a translation function 
\begin_inset Formula $\lambda$
\end_inset

 and a polynomial 
\begin_inset Formula $r$
\end_inset

 such that for all 
\begin_inset Formula $g_{M}$
\end_inset

-proofs 
\begin_inset Formula $x$
\end_inset

, we have 
\begin_inset Formula $h(\lambda(x))=g_{M}(x)$
\end_inset

 and 
\begin_inset Formula $|\lambda(x)|\leq r(|x|)$
\end_inset

.
 We can thus reduce 
\begin_inset Formula $S'$
\end_inset

 to 
\begin_inset Formula $S$
\end_inset

 via the polynomial-time function 
\begin_inset Formula $x\mapsto\langle0^{M},0^{r(|x|)},x\rangle$
\end_inset

.
 
\end_layout

\begin_layout Proof
To prove this claim, assume 
\begin_inset Formula $x\in S'$
\end_inset

.
 By definition we have 
\begin_inset Formula $z=\langle M,0^{q(|x|)},0^{|x|}\rangle\in SP_{M}$
\end_inset

.
 Thus, 
\begin_inset Formula $z$
\end_inset

 is a 
\begin_inset Formula $g_{M}$
\end_inset

-proof for 
\begin_inset Formula $\gamma(z)$
\end_inset

, and therefore 
\begin_inset Formula $\lambda(z)$
\end_inset

 is an 
\begin_inset Formula $h$
\end_inset

-proof for 
\begin_inset Formula $\gamma(z)$
\end_inset

, so 
\begin_inset Formula $w=\lambda(z)$
\end_inset

 satisfies condition (II)(a).
 Condition (I) of 
\begin_inset Formula $S$
\end_inset

 is fulfilled by definition.
 For the length bound of (II), notice 
\begin_inset Formula $|w|=|\lambda(z)|\leq r(|x|)=j$
\end_inset

.
 Since 
\begin_inset Formula $\lambda(z)$
\end_inset

 is an 
\begin_inset Formula $h$
\end_inset

-proof for 
\begin_inset Formula $\gamma(z)$
\end_inset

, we have 
\begin_inset Formula $z=\langle N,0^{l},0^{|x|}\rangle\in SP$
\end_inset

.
 We thus know by definition of 
\begin_inset Formula $SP$
\end_inset

 that 
\begin_inset Formula $N$
\end_inset

 accepts inputs of length at most 
\begin_inset Formula $|x|$
\end_inset

 in at most 
\begin_inset Formula $l$
\end_inset

 steps.
 This satisfies condition (II)(b).
 Altogether, we have 
\begin_inset Formula $\langle0^{M},0^{r(|x|)},x\rangle\in S$
\end_inset

.
 The converse follows immediately from (II)(b).
\end_layout

\begin_layout Standard
The technique of this proof can be generalized and extended to a lot of
 promise classes, most interestingly 
\begin_inset Formula $\UP$
\end_inset

:
\end_layout

\begin_layout Theorem
\begin_inset ERT
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "thm:optimal-pps-imply-complete-sets-for-up"

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
If there is a p-optimal proof system, then 
\begin_inset Formula $\UP$
\end_inset

 has a many-one complete set.
\end_layout

\begin_layout Enumerate
If there is an optimal proof system, then 
\begin_inset Formula $\UP$
\end_inset

 has a complete set under non-uniform many-one reducibility.
\end_layout

\end_deeper
\begin_layout Standard
For the proof, we refer the reader to the work of Köbler, Meßner and Torán
 
\begin_inset CommandInset citation
LatexCommand cite
key "journals/iandc/KoblerMT03"

\end_inset

.
 Among 
\begin_inset Formula $\UP$
\end_inset

, it also contains completeness results on 
\begin_inset Formula $\Few,$
\end_inset


\begin_inset Formula $\FewP$
\end_inset

, 
\begin_inset Formula $\NP\cap\SPARSE$
\end_inset

 and 
\begin_inset Formula $\NP\cap\coNP$
\end_inset

.
\end_layout

\begin_layout Standard
One of the most outstanding consequence of the existence of optimal proof
 systems is the existence of complete 
\begin_inset Formula $\NP$
\end_inset

-pairs, first proven by Razborov in 1994.
 The proof requires some preparation and is demonstrated in the next section.
\end_layout

\begin_layout Section
Canonical Disjoint 
\begin_inset Formula $\NP$
\end_inset

-pairs for Proof Systems
\begin_inset CommandInset label
LatexCommand label
name "sec:Canonical-Disjoint--pairs"

\end_inset


\end_layout

\begin_layout Standard
Razborov found a way to relate proof systems with disjoint 
\begin_inset Formula $\NP$
\end_inset

-pairs 
\begin_inset CommandInset citation
LatexCommand cite
key "journals/eccc/ECCC-TR94-006"

\end_inset

 by defining a 
\emph on
canonical pair 
\begin_inset Formula $(\SATstar,\REF_{f})$
\end_inset


\emph default
 for every proof system 
\begin_inset Formula $f$
\end_inset

, where 
\begin_inset Formula 
\begin{eqnarray*}
\SATstar & = & \{(\varphi,1^{m})\mid\varphi\in\SAT\text{ and }m\geq0\},\\
\REF_{f} & = & \{(\varphi,1^{m})\mid\neg\varphi\in\TAUT\text{ and }\exists y,|y|\leq m\text{ such that }f(y)=\neg\varphi\}.
\end{eqnarray*}

\end_inset

Notice, if 
\begin_inset Formula $\neg\varphi\in\TAUT$
\end_inset

 then 
\begin_inset Formula $\varphi$
\end_inset

 cannot by satisfied by any assignment, and there exists an 
\begin_inset Formula $f$
\end_inset

-proof for 
\begin_inset Formula $\varphi$
\end_inset

.
 Hence, 
\begin_inset Formula $\REF_{f}$
\end_inset

 holds pairs 
\begin_inset Formula $(\varphi,1^{m})$
\end_inset

 for all unsatisfiable formulas 
\begin_inset Formula $\varphi$
\end_inset

 for sufficiently large 
\begin_inset Formula $m$
\end_inset

.
 It is thus disjoint from 
\begin_inset Formula $\SATstar$
\end_inset

, which holds 
\begin_inset Formula $(\varphi,1^{m})$
\end_inset

 only for satisfiable formulas 
\begin_inset Formula $\varphi$
\end_inset

.
 The set 
\begin_inset Formula $\REF_{f}$
\end_inset

 is in 
\begin_inset Formula $\NP$
\end_inset

 because 
\begin_inset Formula $f$
\end_inset

 is polynomial-time computable.
 We can relate 
\begin_inset Formula $\REF_{f}$
\end_inset

 to the question of shortest proofs for tautologies by finding the minimum
 
\begin_inset Formula $m$
\end_inset

 for a given tautology 
\begin_inset Formula $\neg\varphi$
\end_inset

.
\end_layout

\begin_layout Standard
The notion of canonical pairs is closely related to the notion of simulation
 of proof systems and yields an corollary originally due to Razborov 
\begin_inset CommandInset citation
LatexCommand cite
key "journals/eccc/ECCC-TR94-006"

\end_inset

.
\end_layout

\begin_layout Lemma
\begin_inset CommandInset label
LatexCommand label
name "lem:simulation-implies-red-pairs"

\end_inset

For two proof systems 
\begin_inset Formula $f$
\end_inset

 and 
\begin_inset Formula $g$
\end_inset

, if 
\begin_inset Formula $f$
\end_inset

 simulates 
\begin_inset Formula $g$
\end_inset

, then 
\begin_inset Formula $(\SATstar,\REF_{g})\predmo(\SATstar,\REF_{f})$
\end_inset

.
 
\end_layout

\begin_layout Proof
Since 
\begin_inset Formula $f$
\end_inset

 simulates 
\begin_inset Formula $g$
\end_inset

, there is a function 
\begin_inset Formula $h$
\end_inset

 such that for all strings 
\begin_inset Formula $w$
\end_inset

, 
\begin_inset Formula $g(w)=f(h(w))$
\end_inset

 and 
\begin_inset Formula $|h(w)|\leq p(|w|)$
\end_inset

.
 Let 
\begin_inset Formula $\lambda:\Sigma^{*}\to\Sigma^{*}$
\end_inset

 be a function mapping 
\begin_inset Formula $(w,0^{n})$
\end_inset

 to 
\begin_inset Formula $(w,0^{p(n)})$
\end_inset

.
 We claim that for 
\begin_inset Formula $\lambda,$
\end_inset

 we have 
\begin_inset Formula $\lambda(\SATstar)\subseteq\SATstar$
\end_inset

 and 
\begin_inset Formula $\lambda(\REF_{g})\subseteq\lambda(\REF_{f})$
\end_inset

.
 For the first claim, if 
\begin_inset Formula $(w,0^{n})\in\SATstar$
\end_inset

, then for any 
\begin_inset Formula $m\in\mathbb{N}$
\end_inset

 we have 
\begin_inset Formula $(w,0^{m})\in\SATstar$
\end_inset

 by definition.
 For the second claim, if 
\begin_inset Formula $(w,0^{n})\in\REF_{g}$
\end_inset

, then 
\begin_inset Formula $\neg w$
\end_inset

 is a tautology and there exists a 
\begin_inset Formula $y$
\end_inset

, 
\begin_inset Formula $|y|\leq n$
\end_inset

, such that 
\begin_inset Formula $g(y)=\neg w$
\end_inset

.
 Applying 
\begin_inset Formula $h$
\end_inset

 to 
\begin_inset Formula $y$
\end_inset

 yields 
\begin_inset Formula $\neg w=g(y)=f(h(y))$
\end_inset

 and 
\begin_inset Formula $|h(y)|\leq p(|y|)$
\end_inset

 and therefore 
\begin_inset Formula $(w,0^{p(n)})\in\REF_{f}$
\end_inset

.
\end_layout

\begin_layout Standard
Furthermore, for any given disjoint pair 
\begin_inset Formula $(A,B)$
\end_inset

, we can always find a proof system such that the canonical pair is polynomial-t
ime equivalent.
\end_layout

\begin_layout Lemma
\begin_inset CommandInset label
LatexCommand label
name "lem:canonical-pair-for-arbitrary-pair"

\end_inset

For any 
\begin_inset Formula $(A,B)\in\DisjNP$
\end_inset

, there exists a proof system 
\begin_inset Formula $f$
\end_inset

 such that 
\begin_inset Formula $(A,B)\pequivmo(\SATstar,\REF_{f})$
\end_inset

.
\end_layout

\begin_layout Standard
Lemma 
\begin_inset CommandInset ref
LatexCommand ref
reference "lem:simulation-implies-red-pairs"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "lem:canonical-pair-for-arbitrary-pair"

\end_inset

 together result in the following Corollary.
\end_layout

\begin_layout Corollary
\begin_inset CommandInset label
LatexCommand label
name "cor:razborov"

\end_inset

For an optimal proof system 
\begin_inset Formula $f$
\end_inset

, the pair 
\begin_inset Formula $(\SATstar,\REF_{f})$
\end_inset

 is complete for 
\begin_inset Formula $\DisjNP$
\end_inset

.
\end_layout

\begin_layout Proof
For any given 
\begin_inset Formula $(A,B)\in\DisjNP$
\end_inset

, there is a proof system 
\begin_inset Formula $g$
\end_inset

 such that 
\begin_inset Formula $(A,B)\pequivmo(\SATstar,\REF_{g})$
\end_inset

 and 
\begin_inset Formula $(\SATstar,\REF_{g})\predmo(\SATstar,\REF_{f})$
\end_inset

.
 Thus, all disjoint 
\begin_inset Formula $\NP$
\end_inset

 reduce to 
\begin_inset Formula $(\SATstar,\REF_{f})$
\end_inset

.
\end_layout

\begin_layout Standard
This result is an important connection of the theory of proof systems and
 the theory of disjoint 
\begin_inset Formula $\NP$
\end_inset

-pairs.
 It gives us insight in more sufficient conditions for the existence of
 complete pairs.
 An important open question is whether the converse holds.
 Does the existence of a many-one complete disjoint 
\begin_inset Formula $\NP$
\end_inset

-pair imply the existence of an optimal proof system? While the answer remains
 unknown, oracles for both options are known (see Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Converse-of-Razborov"

\end_inset

).
 We refer the reader to Glaßer, Selman and Zhang 
\begin_inset CommandInset citation
LatexCommand cite
key "conf/birthday/GlasserSZ06"

\end_inset

 who provide a proof that disjoint 
\begin_inset Formula $\NP$
\end_inset

-pairs and canonical pairs for proof systems have the same degree structure.
\end_layout

\begin_layout Section
Relativized Worlds
\begin_inset CommandInset label
LatexCommand label
name "sec:Relativized-Worlds"

\end_inset


\end_layout

\begin_layout Standard
Lacking the ability to prove unrelativized results, a lot of open questions
 have been studied in detail using oracle Turing machines.
 This provides some evidence for possible solutions of open problems as
 well as gives a hint which proof techniques to use to study unresolved
 problems.
\end_layout

\begin_layout Subsection
Existence Optimal and p-Optimal Proof Systems
\begin_inset CommandInset label
LatexCommand label
name "sub:Existence-Optimal-and-p-optimal-ps"

\end_inset


\end_layout

\begin_layout Standard
Fortnow and respectively Meßner and Torán found oracles relative to which
 there is no optimal respectively no p-optimal proof system.
 Previously, Meßner and Torán proved 
\begin_inset CommandInset citation
LatexCommand cite
key "journals/eccc/ECCC-TR97-026"

\end_inset

 that the existence of p-optimal proof systems implies the existence of
 complete sets in 
\begin_inset Formula $\UP$
\end_inset

.
 They also showed that the weaker assumption of the existence of an optimal
 proof system is sufficient for the existence of log-space complete set
 in 
\begin_inset Formula $\NP\cap\SPARSE$
\end_inset

 (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Implications-of-the-existence-of-optimal-proof-systems"

\end_inset

, in particular Theorem 
\begin_inset CommandInset ref
LatexCommand ref
reference "thm:optimal-pps-imply-complete-sets-for-up"

\end_inset

 as well as 
\begin_inset CommandInset citation
LatexCommand cite
key "journals/eccc/ECCC-TR97-026,journals/iandc/KoblerMT03"

\end_inset

).
 We summarize their results as follows.
\end_layout

\begin_layout Proposition
\begin_inset CommandInset label
LatexCommand label
name "prop:pps-consequences-for-oracles"

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
If there is a p-optimal proof system, then 
\begin_inset Formula $\UP$
\end_inset

 has a many-one complete set.
\end_layout

\begin_layout Enumerate
If there is an optimal proof system, then complete sets for 
\begin_inset Formula $\NP\cap\SPARSE$
\end_inset

 exist.
\end_layout

\end_deeper
\begin_layout Standard
Since Hartmanis and Hemachandra exhibited an oracle relative to which 
\begin_inset Formula $\UP$
\end_inset

 does not have a many-one complete set 
\begin_inset CommandInset citation
LatexCommand cite
key "Hartmanis:1988:CCW:55096.55103"

\end_inset

, this immediately gives us an oracle relative to which p-optimal proof
 systems do not exist.
 By the results we mentioned earlier for p-optimal proof systems, this also
 means that relative to this oracle, 
\begin_inset Formula $\E\neq\NE$
\end_inset

 and 
\begin_inset Formula $\P\neq\NP$
\end_inset

.
\end_layout

\begin_layout Standard
Buhrman, Fenner, Fortnow and van Melkebeek found an oracle relative to which
 
\begin_inset Formula $\NP\cap\SPARSE$
\end_inset

 does not have complete sets.
 Together with Proposition 
\begin_inset CommandInset ref
LatexCommand ref
reference "prop:pps-consequences-for-oracles"

\end_inset

, this gives a relativized world where optimal proof systems do not exist.
\end_layout

\begin_layout Standard
Glaßer, Selman, Sengupta and Zhang 
\begin_inset CommandInset citation
LatexCommand cite
after "Chapter 6"
key "journals/eccc/ECCC-TR03-011"

\end_inset

 construct an oracle 
\begin_inset Formula $O_{1}$
\end_inset

 relative to which 
\begin_inset Formula $\NE=\coNE$
\end_inset

 and therefore, by Theorem 
\begin_inset CommandInset ref
LatexCommand ref
reference "thm:sufficient-cond-for-optimal-pps"

\end_inset

, optimal proof systems do exist.
 This and the oracle 
\begin_inset Formula $O_{2}$
\end_inset

 from the same paper are also interesting for the next section.
\end_layout

\begin_layout Subsection
Converse of Razborov
\begin_inset CommandInset label
LatexCommand label
name "sub:Converse-of-Razborov"

\end_inset


\end_layout

\begin_layout Standard
The oracles 
\begin_inset Formula $O_{1}$
\end_inset

 and 
\begin_inset Formula $O_{2}$
\end_inset

 by Glaßer, Selman, Sengupta and Zhang 
\begin_inset CommandInset citation
LatexCommand cite
after "Chapter 6"
key "journals/eccc/ECCC-TR03-011"

\end_inset

 provide insight into the question of whether the converse of Razborov's
 Theorem holds.
 That is, does the existence of a complete pair in 
\begin_inset Formula $\DisjNP$
\end_inset

 imply the existence of an optimal proof system? The question remains open,
 but Glaßer et al.
 proved that it cannot be answered with a relativizable proof.
 In particular, for both 
\begin_inset Formula $O_{1}$
\end_inset

 and 
\begin_inset Formula $O_{2}$
\end_inset

 complete pairs exist, but optimal proof systems exists only for 
\begin_inset Formula $O_{1}$
\end_inset

.
 For 
\begin_inset Formula $O_{2}$
\end_inset

, there are no optimal proof systems.
 It is also worth to mention that relative to both oracles, the ESY-conjectures
 holds.
\end_layout

\begin_layout Subsection
Separation of ESY refinements
\begin_inset CommandInset label
LatexCommand label
name "sub:Separation-of-ESY"

\end_inset


\end_layout

\begin_layout Standard
Glaßer and Wechsung constructed an oracle 
\begin_inset Formula $D$
\end_inset

 relative to which 
\begin_inset Formula $\UP=\NP$
\end_inset

 and 
\begin_inset Formula $\NP\neq\coNP$
\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "DBLP:journals/jucs/GlasserW03"

\end_inset

.
 Along with the results we know about ESY-
\begin_inset Formula $tt$
\end_inset

, which does not hold if 
\begin_inset Formula $\UP=\NP$
\end_inset

 (see Theorem 
\begin_inset CommandInset ref
LatexCommand ref
reference "thm:NP=UP-implies-ESY-tt-does-not-hold"

\end_inset

), and Theorem 
\begin_inset CommandInset ref
LatexCommand ref
reference "thm:equiv-esymfails-np=conp-polyboundpps"

\end_inset

, where we prove that 
\begin_inset Formula $\NP\neq\coNP$
\end_inset

 is equivalent to ESY-
\begin_inset Formula $m$
\end_inset

, this oracle separates ESY-
\begin_inset Formula $tt$
\end_inset

 from ESY-
\begin_inset Formula $m$
\end_inset

.
 Notice that therefore, relative to 
\begin_inset Formula $D$
\end_inset

, ESY does not hold, but ESY-
\begin_inset Formula $m$
\end_inset

 does.
\end_layout

\begin_layout Section
Open Questions and Future Work
\begin_inset CommandInset label
LatexCommand label
name "sec:Conclusion"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
open problems
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing single
\noindent
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "bibliography"
options "alpha"

\end_inset


\end_layout

\end_body
\end_document
